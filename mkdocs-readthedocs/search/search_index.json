{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Doxybook2 Example This is a mainpage of Doxybook2 example output. This file is generated from \\mainpage command within [Engine.hpp](/doxybook2/mkdocs-readthedocs/Files/Engine_8hpp/#file-engine.hpp) file. Images: Refs: Some texture class ref Some audio buffer class ref Simple list: list item 1 sub item 1 sub sub item 1 with italic sub sub item 2 with bold sub item 2 list item 2 sub item 3 sub sub item 3 with strike through sub sub item 4 with monospaced Enumerated list: list item 1 sub item 1 sub sub item 1 with italic sub sub item 2 with bold sub item 2 list item 2 sub item 3 sub sub item 3 with strike through Hyper links: GitHub repository Code blocks: #include <iostream> int main(int argc, char** argv) { std::cout << \"Hello World\" << std::endl; return 0; } Subpages: This manual is divided in the following sections: Introduction Advanced usage Updated on 13 November 2019 at 20:24:15 UTC","title":"Doxybook2 Example"},{"location":"#doxybook2-example","text":"This is a mainpage of Doxybook2 example output. This file is generated from \\mainpage command within [Engine.hpp](/doxybook2/mkdocs-readthedocs/Files/Engine_8hpp/#file-engine.hpp) file.","title":"Doxybook2 Example"},{"location":"#images","text":"","title":"Images:"},{"location":"#refs","text":"Some texture class ref Some audio buffer class ref","title":"Refs:"},{"location":"#simple-list","text":"list item 1 sub item 1 sub sub item 1 with italic sub sub item 2 with bold sub item 2 list item 2 sub item 3 sub sub item 3 with strike through sub sub item 4 with monospaced","title":"Simple list:"},{"location":"#enumerated-list","text":"list item 1 sub item 1 sub sub item 1 with italic sub sub item 2 with bold sub item 2 list item 2 sub item 3 sub sub item 3 with strike through","title":"Enumerated list:"},{"location":"#hyper-links","text":"GitHub repository","title":"Hyper links:"},{"location":"#code-blocks","text":"#include <iostream> int main(int argc, char** argv) { std::cout << \"Hello World\" << std::endl; return 0; }","title":"Code blocks:"},{"location":"#subpages","text":"This manual is divided in the following sections: Introduction Advanced usage Updated on 13 November 2019 at 20:24:15 UTC","title":"Subpages:"},{"location":"index_classes/","text":"Classes namespace Engine This namespace contains all of the necessary engine components. namespace Assets class Asset union Event struct Loaded struct Unloaded struct Waiting namespace Audio class AudioBuffer A simple audio buffer to hold PCM samples struct TypedAudioData Use this to populate the buffer. class AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. class Exception namespace Graphics class Framebuffer class Handle class Texture2D class Texture3D namespace Utils class ArrayView Filesystem path utility functions. namespace Path Filesystem path utility functions. Updated on 13 November 2019 at 20:24:15 UTC","title":"Classes"},{"location":"index_classes/#classes","text":"namespace Engine This namespace contains all of the necessary engine components. namespace Assets class Asset union Event struct Loaded struct Unloaded struct Waiting namespace Audio class AudioBuffer A simple audio buffer to hold PCM samples struct TypedAudioData Use this to populate the buffer. class AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. class Exception namespace Graphics class Framebuffer class Handle class Texture2D class Texture3D namespace Utils class ArrayView Filesystem path utility functions. namespace Path Filesystem path utility functions. Updated on 13 November 2019 at 20:24:15 UTC","title":"Classes"},{"location":"index_files/","text":"Files dir src file src/Engine.hpp file src/Exception.hpp dir src/Assets file src/Assets/Asset.hpp file src/Assets/Assets.hpp dir src/Audio file src/Audio/Audio.hpp file src/Audio/AudioBuffer.hpp file src/Audio/AudioManager.hpp dir src/Graphics file src/Graphics/Framebuffer.hpp file src/Graphics/Graphics.hpp file src/Graphics/Handle.hpp file src/Graphics/Renderer.hpp file src/Graphics/Texture.hpp file src/Graphics/Texture2D.hpp file src/Graphics/Texture3D.hpp dir src/Utils file src/Utils/ArrayView.hpp file src/Utils/Config.hpp file src/Utils/Log.hpp file src/Utils/Path.hpp file src/Utils/Utils.hpp Updated on 13 November 2019 at 20:24:15 UTC","title":"Files"},{"location":"index_files/#files","text":"dir src file src/Engine.hpp file src/Exception.hpp dir src/Assets file src/Assets/Asset.hpp file src/Assets/Assets.hpp dir src/Audio file src/Audio/Audio.hpp file src/Audio/AudioBuffer.hpp file src/Audio/AudioManager.hpp dir src/Graphics file src/Graphics/Framebuffer.hpp file src/Graphics/Graphics.hpp file src/Graphics/Handle.hpp file src/Graphics/Renderer.hpp file src/Graphics/Texture.hpp file src/Graphics/Texture2D.hpp file src/Graphics/Texture3D.hpp dir src/Utils file src/Utils/ArrayView.hpp file src/Utils/Config.hpp file src/Utils/Log.hpp file src/Utils/Path.hpp file src/Utils/Utils.hpp Updated on 13 November 2019 at 20:24:15 UTC","title":"Files"},{"location":"index_groups/","text":"Modules module An example game engine This is a brief description to the engine group. module Generic assets This is a brief description to the assets group. module Audio buffers and devices This is a brief description to the audio group. module Graphical related classes This is a brief description to the graphics group. module Some useful utilities This is a brief description to the utils group. Updated on 13 November 2019 at 20:24:15 UTC","title":"Modules"},{"location":"index_groups/#modules","text":"module An example game engine This is a brief description to the engine group. module Generic assets This is a brief description to the assets group. module Audio buffers and devices This is a brief description to the audio group. module Graphical related classes This is a brief description to the graphics group. module Some useful utilities This is a brief description to the utils group. Updated on 13 November 2019 at 20:24:15 UTC","title":"Modules"},{"location":"index_namespaces/","text":"Namespaces namespace Engine This namespace contains all of the necessary engine components. namespace Assets namespace Audio namespace Graphics namespace Utils namespace Path Filesystem path utility functions. Updated on 13 November 2019 at 20:24:15 UTC","title":"Namespaces"},{"location":"index_namespaces/#namespaces","text":"namespace Engine This namespace contains all of the necessary engine components. namespace Assets namespace Audio namespace Graphics namespace Utils namespace Path Filesystem path utility functions. Updated on 13 November 2019 at 20:24:15 UTC","title":"Namespaces"},{"location":"index_pages/","text":"Pages page Advanced Usage page Bug List page Doxybook2 Example page Introduction page Test List page Todo List Updated on 13 November 2019 at 20:24:15 UTC","title":"Pages"},{"location":"index_pages/#pages","text":"page Advanced Usage page Bug List page Doxybook2 Example page Introduction page Test List page Todo List Updated on 13 November 2019 at 20:24:15 UTC","title":"Pages"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/","text":"Engine::Assets::Asset Module: An example game engine / Generic assets #include <Asset.hpp> Public Classes Name union Event Public Functions Name const Event & getEvent () const Returns the current status of the asset. virtual void unload () Call this method to unload the asset. virtual void load () Call this method to load the asset. virtual ~Asset () =0 Asset (const std::string & name) Public Functions Documentation function getEvent inline const Event & getEvent() const Returns the current status of the asset. Use this to determine the state, for example if the assets is being loaded or unloaded. function unload virtual void unload() Call this method to unload the asset. function load virtual void load() Call this method to load the asset. function ~Asset virtual ~Asset() =0 function Asset explicit Asset( const std::string & name ) Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Assets::Asset"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#engineassetsasset","text":"Module: An example game engine / Generic assets #include <Asset.hpp>","title":"Engine::Assets::Asset"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#public-classes","text":"Name union Event","title":"Public Classes"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#public-functions","text":"Name const Event & getEvent () const Returns the current status of the asset. virtual void unload () Call this method to unload the asset. virtual void load () Call this method to load the asset. virtual ~Asset () =0 Asset (const std::string & name)","title":"Public Functions"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#function-getevent","text":"inline const Event & getEvent() const Returns the current status of the asset. Use this to determine the state, for example if the assets is being loaded or unloaded.","title":"function getEvent"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#function-unload","text":"virtual void unload() Call this method to unload the asset.","title":"function unload"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#function-load","text":"virtual void load() Call this method to load the asset.","title":"function load"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#function-asset","text":"virtual ~Asset() =0","title":"function ~Asset"},{"location":"Classes/classEngine_1_1Assets_1_1Asset/#function-asset_1","text":"explicit Asset( const std::string & name ) Updated on 13 November 2019 at 20:24:15 UTC","title":"function Asset"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/","text":"Engine::Audio::AudioBuffer Module: An example game engine / Audio buffers and devices A simple audio buffer to hold PCM samples More... #include <AudioBuffer.hpp> Public Classes Name struct TypedAudioData Use this to populate the buffer. Public Types Name typedef Utils::ArrayView < uint8_t > AudioData enum Type { UNKNOWN, INT8, INT16, INT24, INT32, FLOAT32 } Different type of audio formats. Public Functions Name void setData (const TypedAudioData & data) void loop ( AudioManager & manager) const Loop this buffer forever. void stop ( AudioManager & manager) const Stop this buffer playing. void play ( AudioManager & manager) const Play this buffer. virtual ~AudioBuffer () =default Audio::AudioBuffer destructor. AudioBuffer (const std::string & filename) Constructor for Audio::AudioBuffer . Protected Functions Name float * getData () Protected Attributes Name bool playing Friends Name void Audio::doSomething ( AudioBuffer & buffer) class AudioManager Detailed Description class Engine::Audio::AudioBuffer; A simple audio buffer to hold PCM samples Author : Matus Novak Date : 2017-2019 Note : Some random note Some second random note Bug : Some random bug Some other random bug Test : Some random test description Todo : Some random todo Warning : Some random warning Precondition : First initialize the system. Lorem ipsum donor // Some random code using namespace Engine; Audio::AudioBuffer buffer(\"path/to/file.wav\"); buffer.play(audioManager); More detailed description! // Another code sample #include <iostream> using namespace Engine; Audio::AudioBuffer buffer(\"path/to/file.wav\"); std::cout << buffer.play(...) << std::endl; Public Types Documentation typedef AudioData typedef Utils::ArrayView< uint8_t > AudioData; enum Type enum Type { UNKNOWN, INT8, INT16, INT24, INT32, FLOAT32 } Different type of audio formats. Public Functions Documentation function setData void setData( const TypedAudioData & data ) function loop void loop( AudioManager & manager ) const Loop this buffer forever. Exceptions : Exception If this buffer is already looping Note : This will loop forever until you call stop function stop void stop( AudioManager & manager ) const Stop this buffer playing. Exceptions : Exception If this buffer is already stopped function play void play( AudioManager & manager ) const Play this buffer. Exceptions : Exception If this buffer is already playing function ~AudioBuffer virtual ~AudioBuffer() =default Audio::AudioBuffer destructor. function AudioBuffer explicit AudioBuffer( const std::string & filename ) Constructor for Audio::AudioBuffer . Protected Functions Documentation function getData float * getData() Protected Attributes Documentation variable playing bool playing {false}; Friends friend Audio::doSomething friend void Audio::doSomething( AudioBuffer & buffer ); friend AudioManager friend class AudioManager; Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Audio::AudioBuffer"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#engineaudioaudiobuffer","text":"Module: An example game engine / Audio buffers and devices A simple audio buffer to hold PCM samples More... #include <AudioBuffer.hpp>","title":"Engine::Audio::AudioBuffer"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-classes","text":"Name struct TypedAudioData Use this to populate the buffer.","title":"Public Classes"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-types","text":"Name typedef Utils::ArrayView < uint8_t > AudioData enum Type { UNKNOWN, INT8, INT16, INT24, INT32, FLOAT32 } Different type of audio formats.","title":"Public Types"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-functions","text":"Name void setData (const TypedAudioData & data) void loop ( AudioManager & manager) const Loop this buffer forever. void stop ( AudioManager & manager) const Stop this buffer playing. void play ( AudioManager & manager) const Play this buffer. virtual ~AudioBuffer () =default Audio::AudioBuffer destructor. AudioBuffer (const std::string & filename) Constructor for Audio::AudioBuffer .","title":"Public Functions"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-functions","text":"Name float * getData ()","title":"Protected Functions"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-attributes","text":"Name bool playing","title":"Protected Attributes"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#friends","text":"Name void Audio::doSomething ( AudioBuffer & buffer) class AudioManager","title":"Friends"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#detailed-description","text":"class Engine::Audio::AudioBuffer; A simple audio buffer to hold PCM samples Author : Matus Novak Date : 2017-2019 Note : Some random note Some second random note Bug : Some random bug Some other random bug Test : Some random test description Todo : Some random todo Warning : Some random warning Precondition : First initialize the system. Lorem ipsum donor // Some random code using namespace Engine; Audio::AudioBuffer buffer(\"path/to/file.wav\"); buffer.play(audioManager); More detailed description! // Another code sample #include <iostream> using namespace Engine; Audio::AudioBuffer buffer(\"path/to/file.wav\"); std::cout << buffer.play(...) << std::endl;","title":"Detailed Description"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#typedef-audiodata","text":"typedef Utils::ArrayView< uint8_t > AudioData;","title":"typedef AudioData"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#enum-type","text":"enum Type { UNKNOWN, INT8, INT16, INT24, INT32, FLOAT32 } Different type of audio formats.","title":"enum Type"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-setdata","text":"void setData( const TypedAudioData & data )","title":"function setData"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-loop","text":"void loop( AudioManager & manager ) const Loop this buffer forever. Exceptions : Exception If this buffer is already looping Note : This will loop forever until you call stop","title":"function loop"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-stop","text":"void stop( AudioManager & manager ) const Stop this buffer playing. Exceptions : Exception If this buffer is already stopped","title":"function stop"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-play","text":"void play( AudioManager & manager ) const Play this buffer. Exceptions : Exception If this buffer is already playing","title":"function play"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-audiobuffer","text":"virtual ~AudioBuffer() =default Audio::AudioBuffer destructor.","title":"function ~AudioBuffer"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-audiobuffer_1","text":"explicit AudioBuffer( const std::string & filename ) Constructor for Audio::AudioBuffer .","title":"function AudioBuffer"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-getdata","text":"float * getData()","title":"function getData"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#variable-playing","text":"bool playing {false};","title":"variable playing"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#friends_1","text":"","title":"Friends"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#friend-audiodosomething","text":"friend void Audio::doSomething( AudioBuffer & buffer );","title":"friend Audio::doSomething"},{"location":"Classes/classEngine_1_1Audio_1_1AudioBuffer/#friend-audiomanager","text":"friend class AudioManager; Updated on 13 November 2019 at 20:24:15 UTC","title":"friend AudioManager"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/","text":"Engine::Audio::AudioManager Module: An example game engine / Audio buffers and devices An audio manager that accepts multiple Audio::AudioBuffer instances. More... #include <AudioManager.hpp> Public Functions Name void enque (const AudioBuffer & buffer) ~AudioManager () AudioManager (int numOfChannels =128) Detailed Description class Engine::Audio::AudioManager; An audio manager that accepts multiple Audio::AudioBuffer instances. See : Audio::AudioBuffer Lorem Ipsum Donor. Some Random link with bold and italics And the following is a typewritter font. And here is some list items: First item Second item Third item with bold text Public Functions Documentation function enque void enque( const AudioBuffer & buffer ) function ~AudioManager ~AudioManager() function AudioManager AudioManager( int numOfChannels =128 ) Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Audio::AudioManager"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#engineaudioaudiomanager","text":"Module: An example game engine / Audio buffers and devices An audio manager that accepts multiple Audio::AudioBuffer instances. More... #include <AudioManager.hpp>","title":"Engine::Audio::AudioManager"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#public-functions","text":"Name void enque (const AudioBuffer & buffer) ~AudioManager () AudioManager (int numOfChannels =128)","title":"Public Functions"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#detailed-description","text":"class Engine::Audio::AudioManager; An audio manager that accepts multiple Audio::AudioBuffer instances. See : Audio::AudioBuffer Lorem Ipsum Donor. Some Random link with bold and italics And the following is a typewritter font. And here is some list items: First item Second item Third item with bold text","title":"Detailed Description"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#function-enque","text":"void enque( const AudioBuffer & buffer )","title":"function enque"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#function-audiomanager","text":"~AudioManager()","title":"function ~AudioManager"},{"location":"Classes/classEngine_1_1Audio_1_1AudioManager/#function-audiomanager_1","text":"AudioManager( int numOfChannels =128 ) Updated on 13 November 2019 at 20:24:15 UTC","title":"function AudioManager"},{"location":"Classes/classEngine_1_1Exception/","text":"Engine::Exception Module: An example game engine #include <Exception.hpp> Inherits from exception Public Functions Name const char * what () const override Exception (std::string msg) Exception () =default Public Functions Documentation function what inline const char * what() const override function Exception inline explicit Exception( std::string msg ) function Exception Exception() =default Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Exception"},{"location":"Classes/classEngine_1_1Exception/#engineexception","text":"Module: An example game engine #include <Exception.hpp> Inherits from exception","title":"Engine::Exception"},{"location":"Classes/classEngine_1_1Exception/#public-functions","text":"Name const char * what () const override Exception (std::string msg) Exception () =default","title":"Public Functions"},{"location":"Classes/classEngine_1_1Exception/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Exception/#function-what","text":"inline const char * what() const override","title":"function what"},{"location":"Classes/classEngine_1_1Exception/#function-exception","text":"inline explicit Exception( std::string msg )","title":"function Exception"},{"location":"Classes/classEngine_1_1Exception/#function-exception_1","text":"Exception() =default Updated on 13 November 2019 at 20:24:15 UTC","title":"function Exception"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/","text":"Engine::Graphics::Framebuffer Module: An example game engine / Graphical related classes #include <Framebuffer.hpp> Inherits from Engine::Graphics::Texture , Engine::Graphics::Handle Public Functions Name virtual int getDepth () const override Returns the depth of the texture in pixels. virtual int getHeight () const override Returns the height of the texture in pixels. virtual int getWidth () const override Returns the width of the texture in pixels. virtual ~Framebuffer () Framebuffer (int width, int height) Additional inherited members Public Types inherited from Engine::Graphics::Texture Name enum Type { UNKNOWN, RGBA8, RGB8, RGBA16, RGB16, RGBA32, RGB32 } Public Functions inherited from Engine::Graphics::Texture Name bool isLoaded () const virtual ~Texture () =default Texture ( Type type) Protected Attributes inherited from Engine::Graphics::Texture Name Type type bool loaded Public Functions inherited from Engine::Graphics::Handle Name int getHandle () const virtual ~Handle () =default Handle () =default Protected Attributes inherited from Engine::Graphics::Handle Name int handle Public Functions Documentation function getDepth virtual int getDepth() const override Returns the depth of the texture in pixels. Return : Depth in pixels Note : If this texture is 2D the depth is always 1 pixels Reimplements : Engine::Graphics::Texture::getDepth function getHeight virtual int getHeight() const override Returns the height of the texture in pixels. Return : Height in pixels Reimplements : Engine::Graphics::Texture::getHeight function getWidth virtual int getWidth() const override Returns the width of the texture in pixels. Return : Width in pixels Reimplements : Engine::Graphics::Texture::getWidth function ~Framebuffer virtual ~Framebuffer() function Framebuffer Framebuffer( int width, int height ) Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Graphics::Framebuffer"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#enginegraphicsframebuffer","text":"Module: An example game engine / Graphical related classes #include <Framebuffer.hpp> Inherits from Engine::Graphics::Texture , Engine::Graphics::Handle","title":"Engine::Graphics::Framebuffer"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#public-functions","text":"Name virtual int getDepth () const override Returns the depth of the texture in pixels. virtual int getHeight () const override Returns the height of the texture in pixels. virtual int getWidth () const override Returns the width of the texture in pixels. virtual ~Framebuffer () Framebuffer (int width, int height)","title":"Public Functions"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#additional-inherited-members","text":"Public Types inherited from Engine::Graphics::Texture Name enum Type { UNKNOWN, RGBA8, RGB8, RGBA16, RGB16, RGBA32, RGB32 } Public Functions inherited from Engine::Graphics::Texture Name bool isLoaded () const virtual ~Texture () =default Texture ( Type type) Protected Attributes inherited from Engine::Graphics::Texture Name Type type bool loaded Public Functions inherited from Engine::Graphics::Handle Name int getHandle () const virtual ~Handle () =default Handle () =default Protected Attributes inherited from Engine::Graphics::Handle Name int handle","title":"Additional inherited members"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-getdepth","text":"virtual int getDepth() const override Returns the depth of the texture in pixels. Return : Depth in pixels Note : If this texture is 2D the depth is always 1 pixels Reimplements : Engine::Graphics::Texture::getDepth","title":"function getDepth"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-getheight","text":"virtual int getHeight() const override Returns the height of the texture in pixels. Return : Height in pixels Reimplements : Engine::Graphics::Texture::getHeight","title":"function getHeight"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-getwidth","text":"virtual int getWidth() const override Returns the width of the texture in pixels. Return : Width in pixels Reimplements : Engine::Graphics::Texture::getWidth","title":"function getWidth"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-framebuffer","text":"virtual ~Framebuffer()","title":"function ~Framebuffer"},{"location":"Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-framebuffer_1","text":"Framebuffer( int width, int height ) Updated on 13 November 2019 at 20:24:15 UTC","title":"function Framebuffer"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/","text":"Engine::Graphics::Handle Module: An example game engine / Graphical related classes #include <Handle.hpp> Inherited by Engine::Graphics::Texture Public Functions Name int getHandle () const virtual ~Handle () =default Handle () =default Protected Attributes Name int handle Public Functions Documentation function getHandle inline int getHandle() const function ~Handle virtual ~Handle() =default function Handle Handle() =default Protected Attributes Documentation variable handle int handle; Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Graphics::Handle"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#enginegraphicshandle","text":"Module: An example game engine / Graphical related classes #include <Handle.hpp> Inherited by Engine::Graphics::Texture","title":"Engine::Graphics::Handle"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#public-functions","text":"Name int getHandle () const virtual ~Handle () =default Handle () =default","title":"Public Functions"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#protected-attributes","text":"Name int handle","title":"Protected Attributes"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#function-gethandle","text":"inline int getHandle() const","title":"function getHandle"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#function-handle","text":"virtual ~Handle() =default","title":"function ~Handle"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#function-handle_1","text":"Handle() =default","title":"function Handle"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Classes/classEngine_1_1Graphics_1_1Handle/#variable-handle","text":"int handle; Updated on 13 November 2019 at 20:24:15 UTC","title":"variable handle"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/","text":"Engine::Graphics::Texture Module: An example game engine / Graphical related classes This is a base texture class that serves as a base class for other texture types. More... #include <Texture.hpp> Inherits from Engine::Graphics::Handle Inherited by Engine::Graphics::Framebuffer , Engine::Graphics::Texture2D , Engine::Graphics::Texture3D Public Types Name enum Type { UNKNOWN, RGBA8, RGB8, RGBA16, RGB16, RGBA32, RGB32 } Public Functions Name bool isLoaded () const virtual int getDepth () const =0 Returns the depth of the texture in pixels. virtual int getHeight () const =0 Returns the height of the texture in pixels. virtual int getWidth () const =0 Returns the width of the texture in pixels. virtual ~Texture () =default Texture ( Type type) Protected Attributes Name Type type bool loaded Additional inherited members Public Functions inherited from Engine::Graphics::Handle Name int getHandle () const virtual ~Handle () =default Handle () =default Protected Attributes inherited from Engine::Graphics::Handle Name int handle Detailed Description interface Engine::Graphics::Texture; This is a base texture class that serves as a base class for other texture types. Bug : This has some weird bug too! Public Types Documentation enum Type enum Type { UNKNOWN, RGBA8, RGB8, RGBA16, RGB16, RGBA32, RGB32 } Public Functions Documentation function isLoaded inline bool isLoaded() const Does some more things function getDepth virtual int getDepth() const =0 Returns the depth of the texture in pixels. Return : Depth in pixels Note : If this texture is 2D the depth is always 1 pixels Reimplemented by : Engine::Graphics::Framebuffer::getDepth , Engine::Graphics::Texture3D::getDepth , Engine::Graphics::Texture2D::getDepth function getHeight virtual int getHeight() const =0 Returns the height of the texture in pixels. Return : Height in pixels Reimplemented by : Engine::Graphics::Framebuffer::getHeight , Engine::Graphics::Texture3D::getHeight , Engine::Graphics::Texture2D::getHeight function getWidth virtual int getWidth() const =0 Returns the width of the texture in pixels. Return : Width in pixels Reimplemented by : Engine::Graphics::Framebuffer::getWidth , Engine::Graphics::Texture3D::getWidth , Engine::Graphics::Texture2D::getWidth function ~Texture virtual ~Texture() =default function Texture explicit Texture( Type type ) Protected Attributes Documentation variable type Type type; variable loaded bool loaded {false}; Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Graphics::Texture"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#enginegraphicstexture","text":"Module: An example game engine / Graphical related classes This is a base texture class that serves as a base class for other texture types. More... #include <Texture.hpp> Inherits from Engine::Graphics::Handle Inherited by Engine::Graphics::Framebuffer , Engine::Graphics::Texture2D , Engine::Graphics::Texture3D","title":"Engine::Graphics::Texture"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#public-types","text":"Name enum Type { UNKNOWN, RGBA8, RGB8, RGBA16, RGB16, RGBA32, RGB32 }","title":"Public Types"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#public-functions","text":"Name bool isLoaded () const virtual int getDepth () const =0 Returns the depth of the texture in pixels. virtual int getHeight () const =0 Returns the height of the texture in pixels. virtual int getWidth () const =0 Returns the width of the texture in pixels. virtual ~Texture () =default Texture ( Type type)","title":"Public Functions"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#protected-attributes","text":"Name Type type bool loaded","title":"Protected Attributes"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#additional-inherited-members","text":"Public Functions inherited from Engine::Graphics::Handle Name int getHandle () const virtual ~Handle () =default Handle () =default Protected Attributes inherited from Engine::Graphics::Handle Name int handle","title":"Additional inherited members"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#detailed-description","text":"interface Engine::Graphics::Texture; This is a base texture class that serves as a base class for other texture types. Bug : This has some weird bug too!","title":"Detailed Description"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#enum-type","text":"enum Type { UNKNOWN, RGBA8, RGB8, RGBA16, RGB16, RGBA32, RGB32 }","title":"enum Type"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#function-isloaded","text":"inline bool isLoaded() const Does some more things","title":"function isLoaded"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#function-getdepth","text":"virtual int getDepth() const =0 Returns the depth of the texture in pixels. Return : Depth in pixels Note : If this texture is 2D the depth is always 1 pixels Reimplemented by : Engine::Graphics::Framebuffer::getDepth , Engine::Graphics::Texture3D::getDepth , Engine::Graphics::Texture2D::getDepth","title":"function getDepth"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#function-getheight","text":"virtual int getHeight() const =0 Returns the height of the texture in pixels. Return : Height in pixels Reimplemented by : Engine::Graphics::Framebuffer::getHeight , Engine::Graphics::Texture3D::getHeight , Engine::Graphics::Texture2D::getHeight","title":"function getHeight"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#function-getwidth","text":"virtual int getWidth() const =0 Returns the width of the texture in pixels. Return : Width in pixels Reimplemented by : Engine::Graphics::Framebuffer::getWidth , Engine::Graphics::Texture3D::getWidth , Engine::Graphics::Texture2D::getWidth","title":"function getWidth"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#function-texture","text":"virtual ~Texture() =default","title":"function ~Texture"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#function-texture_1","text":"explicit Texture( Type type )","title":"function Texture"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#variable-type","text":"Type type;","title":"variable type"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture/#variable-loaded","text":"bool loaded {false}; Updated on 13 November 2019 at 20:24:15 UTC","title":"variable loaded"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/","text":"Engine::Graphics::Texture2D Module: An example game engine / Graphical related classes #include <Texture2D.hpp> Inherits from Engine::Graphics::Texture , Engine::Graphics::Handle Public Functions Name virtual int getDepth () const override Returns the depth of the texture in pixels. virtual int getHeight () const override Returns the height of the texture in pixels. virtual int getWidth () const override Returns the width of the texture in pixels. virtual ~Texture2D () Texture2D (int width, int height, uint8_t * data, Texture::Type type = Texture::Type::RGBA8 ) Additional inherited members Public Types inherited from Engine::Graphics::Texture Name enum Type { UNKNOWN, RGBA8, RGB8, RGBA16, RGB16, RGBA32, RGB32 } Public Functions inherited from Engine::Graphics::Texture Name bool isLoaded () const virtual ~Texture () =default Texture ( Type type) Protected Attributes inherited from Engine::Graphics::Texture Name Type type bool loaded Public Functions inherited from Engine::Graphics::Handle Name int getHandle () const virtual ~Handle () =default Handle () =default Protected Attributes inherited from Engine::Graphics::Handle Name int handle Public Functions Documentation function getDepth virtual int getDepth() const override Returns the depth of the texture in pixels. Return : Depth in pixels Note : If this texture is 2D the depth is always 1 pixels Reimplements : Engine::Graphics::Texture::getDepth function getHeight virtual int getHeight() const override Returns the height of the texture in pixels. Return : Height in pixels Reimplements : Engine::Graphics::Texture::getHeight function getWidth virtual int getWidth() const override Returns the width of the texture in pixels. Return : Width in pixels Reimplements : Engine::Graphics::Texture::getWidth function ~Texture2D virtual ~Texture2D() function Texture2D Texture2D( int width, int height, uint8_t * data, Texture::Type type =Texture::Type::RGBA8 ) Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Graphics::Texture2D"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#enginegraphicstexture2d","text":"Module: An example game engine / Graphical related classes #include <Texture2D.hpp> Inherits from Engine::Graphics::Texture , Engine::Graphics::Handle","title":"Engine::Graphics::Texture2D"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#public-functions","text":"Name virtual int getDepth () const override Returns the depth of the texture in pixels. virtual int getHeight () const override Returns the height of the texture in pixels. virtual int getWidth () const override Returns the width of the texture in pixels. virtual ~Texture2D () Texture2D (int width, int height, uint8_t * data, Texture::Type type = Texture::Type::RGBA8 )","title":"Public Functions"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#additional-inherited-members","text":"Public Types inherited from Engine::Graphics::Texture Name enum Type { UNKNOWN, RGBA8, RGB8, RGBA16, RGB16, RGBA32, RGB32 } Public Functions inherited from Engine::Graphics::Texture Name bool isLoaded () const virtual ~Texture () =default Texture ( Type type) Protected Attributes inherited from Engine::Graphics::Texture Name Type type bool loaded Public Functions inherited from Engine::Graphics::Handle Name int getHandle () const virtual ~Handle () =default Handle () =default Protected Attributes inherited from Engine::Graphics::Handle Name int handle","title":"Additional inherited members"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#function-getdepth","text":"virtual int getDepth() const override Returns the depth of the texture in pixels. Return : Depth in pixels Note : If this texture is 2D the depth is always 1 pixels Reimplements : Engine::Graphics::Texture::getDepth","title":"function getDepth"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#function-getheight","text":"virtual int getHeight() const override Returns the height of the texture in pixels. Return : Height in pixels Reimplements : Engine::Graphics::Texture::getHeight","title":"function getHeight"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#function-getwidth","text":"virtual int getWidth() const override Returns the width of the texture in pixels. Return : Width in pixels Reimplements : Engine::Graphics::Texture::getWidth","title":"function getWidth"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#function-texture2d","text":"virtual ~Texture2D()","title":"function ~Texture2D"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture2D/#function-texture2d_1","text":"Texture2D( int width, int height, uint8_t * data, Texture::Type type =Texture::Type::RGBA8 ) Updated on 13 November 2019 at 20:24:15 UTC","title":"function Texture2D"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/","text":"Engine::Graphics::Texture3D Module: An example game engine / Graphical related classes #include <Texture3D.hpp> Inherits from Engine::Graphics::Texture , Engine::Graphics::Handle Public Functions Name virtual int getDepth () const override Returns the depth of the texture in pixels. virtual int getHeight () const override Returns the height of the texture in pixels. virtual int getWidth () const override Returns the width of the texture in pixels. virtual ~Texture3D () Texture3D (int width, int height, int depth, uint8_t * data, Texture::Type type = Texture::Type::RGBA8 ) Additional inherited members Public Types inherited from Engine::Graphics::Texture Name enum Type { UNKNOWN, RGBA8, RGB8, RGBA16, RGB16, RGBA32, RGB32 } Public Functions inherited from Engine::Graphics::Texture Name bool isLoaded () const virtual ~Texture () =default Texture ( Type type) Protected Attributes inherited from Engine::Graphics::Texture Name Type type bool loaded Public Functions inherited from Engine::Graphics::Handle Name int getHandle () const virtual ~Handle () =default Handle () =default Protected Attributes inherited from Engine::Graphics::Handle Name int handle Public Functions Documentation function getDepth virtual int getDepth() const override Returns the depth of the texture in pixels. Return : Depth in pixels Note : If this texture is 2D the depth is always 1 pixels Reimplements : Engine::Graphics::Texture::getDepth function getHeight virtual int getHeight() const override Returns the height of the texture in pixels. Return : Height in pixels Reimplements : Engine::Graphics::Texture::getHeight function getWidth virtual int getWidth() const override Returns the width of the texture in pixels. Return : Width in pixels Reimplements : Engine::Graphics::Texture::getWidth function ~Texture3D virtual ~Texture3D() function Texture3D Texture3D( int width, int height, int depth, uint8_t * data, Texture::Type type =Texture::Type::RGBA8 ) Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Graphics::Texture3D"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#enginegraphicstexture3d","text":"Module: An example game engine / Graphical related classes #include <Texture3D.hpp> Inherits from Engine::Graphics::Texture , Engine::Graphics::Handle","title":"Engine::Graphics::Texture3D"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#public-functions","text":"Name virtual int getDepth () const override Returns the depth of the texture in pixels. virtual int getHeight () const override Returns the height of the texture in pixels. virtual int getWidth () const override Returns the width of the texture in pixels. virtual ~Texture3D () Texture3D (int width, int height, int depth, uint8_t * data, Texture::Type type = Texture::Type::RGBA8 )","title":"Public Functions"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#additional-inherited-members","text":"Public Types inherited from Engine::Graphics::Texture Name enum Type { UNKNOWN, RGBA8, RGB8, RGBA16, RGB16, RGBA32, RGB32 } Public Functions inherited from Engine::Graphics::Texture Name bool isLoaded () const virtual ~Texture () =default Texture ( Type type) Protected Attributes inherited from Engine::Graphics::Texture Name Type type bool loaded Public Functions inherited from Engine::Graphics::Handle Name int getHandle () const virtual ~Handle () =default Handle () =default Protected Attributes inherited from Engine::Graphics::Handle Name int handle","title":"Additional inherited members"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#function-getdepth","text":"virtual int getDepth() const override Returns the depth of the texture in pixels. Return : Depth in pixels Note : If this texture is 2D the depth is always 1 pixels Reimplements : Engine::Graphics::Texture::getDepth","title":"function getDepth"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#function-getheight","text":"virtual int getHeight() const override Returns the height of the texture in pixels. Return : Height in pixels Reimplements : Engine::Graphics::Texture::getHeight","title":"function getHeight"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#function-getwidth","text":"virtual int getWidth() const override Returns the width of the texture in pixels. Return : Width in pixels Reimplements : Engine::Graphics::Texture::getWidth","title":"function getWidth"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#function-texture3d","text":"virtual ~Texture3D()","title":"function ~Texture3D"},{"location":"Classes/classEngine_1_1Graphics_1_1Texture3D/#function-texture3d_1","text":"Texture3D( int width, int height, int depth, uint8_t * data, Texture::Type type =Texture::Type::RGBA8 ) Updated on 13 November 2019 at 20:24:15 UTC","title":"function Texture3D"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/","text":"Engine::Utils::ArrayView Module: An example game engine / Some useful utilities Filesystem path utility functions. More... #include <ArrayView.hpp> Public Functions Name virtual size_t size () const virtual const T * data () const virtual ~ArrayView () =default ArrayView (const T * src, size_t len) Detailed Description template <typename T =uint8_t> class Engine::Utils::ArrayView; Filesystem path utility functions. Template Parameters : T The type of the data, for example uint8_t Public Functions Documentation function size virtual size_t size() const function data virtual const T * data() const function ~ArrayView virtual ~ArrayView() =default function ArrayView ArrayView( const T * src, size_t len ) Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Utils::ArrayView"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#engineutilsarrayview","text":"Module: An example game engine / Some useful utilities Filesystem path utility functions. More... #include <ArrayView.hpp>","title":"Engine::Utils::ArrayView"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#public-functions","text":"Name virtual size_t size () const virtual const T * data () const virtual ~ArrayView () =default ArrayView (const T * src, size_t len)","title":"Public Functions"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#detailed-description","text":"template <typename T =uint8_t> class Engine::Utils::ArrayView; Filesystem path utility functions. Template Parameters : T The type of the data, for example uint8_t","title":"Detailed Description"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#function-size","text":"virtual size_t size() const","title":"function size"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#function-data","text":"virtual const T * data() const","title":"function data"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#function-arrayview","text":"virtual ~ArrayView() =default","title":"function ~ArrayView"},{"location":"Classes/classEngine_1_1Utils_1_1ArrayView/#function-arrayview_1","text":"ArrayView( const T * src, size_t len ) Updated on 13 November 2019 at 20:24:15 UTC","title":"function ArrayView"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/","text":"Engine::Assets::Asset::Event::Loaded #include <Asset.hpp> Public Attributes Name int usage bool success Public Attributes Documentation variable usage int usage; variable success bool success; Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Assets::Asset::Event::Loaded"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#engineassetsasseteventloaded","text":"#include <Asset.hpp>","title":"Engine::Assets::Asset::Event::Loaded"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#public-attributes","text":"Name int usage bool success","title":"Public Attributes"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#variable-usage","text":"int usage;","title":"variable usage"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#variable-success","text":"bool success; Updated on 13 November 2019 at 20:24:15 UTC","title":"variable success"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/","text":"Engine::Assets::Asset::Event::Unloaded #include <Asset.hpp> Public Attributes Name bool success Public Attributes Documentation variable success bool success; Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Assets::Asset::Event::Unloaded"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/#engineassetsasseteventunloaded","text":"#include <Asset.hpp>","title":"Engine::Assets::Asset::Event::Unloaded"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/#public-attributes","text":"Name bool success","title":"Public Attributes"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/#variable-success","text":"bool success; Updated on 13 November 2019 at 20:24:15 UTC","title":"variable success"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/","text":"Engine::Assets::Asset::Event::Waiting #include <Asset.hpp> Public Attributes Name Asset * other The pointer to the other asset this asset is waiting for. Public Attributes Documentation variable other Asset * other; The pointer to the other asset this asset is waiting for. Note : May be null Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Assets::Asset::Event::Waiting"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/#engineassetsasseteventwaiting","text":"#include <Asset.hpp>","title":"Engine::Assets::Asset::Event::Waiting"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/#public-attributes","text":"Name Asset * other The pointer to the other asset this asset is waiting for.","title":"Public Attributes"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/#variable-other","text":"Asset * other; The pointer to the other asset this asset is waiting for. Note : May be null Updated on 13 November 2019 at 20:24:15 UTC","title":"variable other"},{"location":"Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/","text":"Engine::Audio::AudioBuffer::TypedAudioData Use this to populate the buffer. #include <AudioBuffer.hpp> Public Attributes Name Type type AudioData buffer Public Attributes Documentation variable type Type type; variable buffer AudioData buffer; Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Audio::AudioBuffer::TypedAudioData"},{"location":"Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#engineaudioaudiobuffertypedaudiodata","text":"Use this to populate the buffer. #include <AudioBuffer.hpp>","title":"Engine::Audio::AudioBuffer::TypedAudioData"},{"location":"Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#public-attributes","text":"Name Type type AudioData buffer","title":"Public Attributes"},{"location":"Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#variable-type","text":"Type type;","title":"variable type"},{"location":"Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#variable-buffer","text":"AudioData buffer; Updated on 13 November 2019 at 20:24:15 UTC","title":"variable buffer"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/","text":"Engine::Assets::Asset::Event Module: An example game engine / Generic assets #include <Asset.hpp> Public Classes Name struct Waiting struct Unloaded struct Loaded Public Attributes Name struct Engine::Assets::Asset::Event::Waiting waiting struct Engine::Assets::Asset::Event::Unloaded unloaded struct Engine::Assets::Asset::Event::Loaded loaded Public Attributes Documentation variable waiting struct Engine::Assets::Asset::Event::Waiting waiting; variable unloaded struct Engine::Assets::Asset::Event::Unloaded unloaded; variable loaded struct Engine::Assets::Asset::Event::Loaded loaded; Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Assets::Asset::Event"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#engineassetsassetevent","text":"Module: An example game engine / Generic assets #include <Asset.hpp>","title":"Engine::Assets::Asset::Event"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#public-classes","text":"Name struct Waiting struct Unloaded struct Loaded","title":"Public Classes"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#public-attributes","text":"Name struct Engine::Assets::Asset::Event::Waiting waiting struct Engine::Assets::Asset::Event::Unloaded unloaded struct Engine::Assets::Asset::Event::Loaded loaded","title":"Public Attributes"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#variable-waiting","text":"struct Engine::Assets::Asset::Event::Waiting waiting;","title":"variable waiting"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#variable-unloaded","text":"struct Engine::Assets::Asset::Event::Unloaded unloaded;","title":"variable unloaded"},{"location":"Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#variable-loaded","text":"struct Engine::Assets::Asset::Event::Loaded loaded; Updated on 13 November 2019 at 20:24:15 UTC","title":"variable loaded"},{"location":"Files/ArrayView_8hpp/","text":"src/Utils/ArrayView.hpp Namespaces Name Engine::Utils Engine This namespace contains all of the necessary engine components. Classes Name class Engine::Utils::ArrayView Filesystem path utility functions. Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Utils/ArrayView.hpp"},{"location":"Files/ArrayView_8hpp/#srcutilsarrayviewhpp","text":"","title":"src/Utils/ArrayView.hpp"},{"location":"Files/ArrayView_8hpp/#namespaces","text":"Name Engine::Utils Engine This namespace contains all of the necessary engine components.","title":"Namespaces"},{"location":"Files/ArrayView_8hpp/#classes","text":"Name class Engine::Utils::ArrayView Filesystem path utility functions. Updated on 13 November 2019 at 20:24:15 UTC","title":"Classes"},{"location":"Files/Asset_8hpp/","text":"src/Assets/Asset.hpp Namespaces Name Engine::Assets Engine This namespace contains all of the necessary engine components. Classes Name struct Engine::Assets::Asset::Event::Waiting struct Engine::Assets::Asset::Event::Unloaded struct Engine::Assets::Asset::Event::Loaded union Engine::Assets::Asset::Event class Engine::Assets::Asset Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Assets/Asset.hpp"},{"location":"Files/Asset_8hpp/#srcassetsassethpp","text":"","title":"src/Assets/Asset.hpp"},{"location":"Files/Asset_8hpp/#namespaces","text":"Name Engine::Assets Engine This namespace contains all of the necessary engine components.","title":"Namespaces"},{"location":"Files/Asset_8hpp/#classes","text":"Name struct Engine::Assets::Asset::Event::Waiting struct Engine::Assets::Asset::Event::Unloaded struct Engine::Assets::Asset::Event::Loaded union Engine::Assets::Asset::Event class Engine::Assets::Asset Updated on 13 November 2019 at 20:24:15 UTC","title":"Classes"},{"location":"Files/Assets_8hpp/","text":"src/Assets/Assets.hpp Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Assets/Assets.hpp"},{"location":"Files/Assets_8hpp/#srcassetsassetshpp","text":"Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Assets/Assets.hpp"},{"location":"Files/AudioBuffer_8hpp/","text":"src/Audio/AudioBuffer.hpp Namespaces Name Engine::Audio Engine This namespace contains all of the necessary engine components. Classes Name struct Engine::Audio::AudioBuffer::TypedAudioData Use this to populate the buffer. class Engine::Audio::AudioBuffer A simple audio buffer to hold PCM samples Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Audio/AudioBuffer.hpp"},{"location":"Files/AudioBuffer_8hpp/#srcaudioaudiobufferhpp","text":"","title":"src/Audio/AudioBuffer.hpp"},{"location":"Files/AudioBuffer_8hpp/#namespaces","text":"Name Engine::Audio Engine This namespace contains all of the necessary engine components.","title":"Namespaces"},{"location":"Files/AudioBuffer_8hpp/#classes","text":"Name struct Engine::Audio::AudioBuffer::TypedAudioData Use this to populate the buffer. class Engine::Audio::AudioBuffer A simple audio buffer to hold PCM samples Updated on 13 November 2019 at 20:24:15 UTC","title":"Classes"},{"location":"Files/AudioManager_8hpp/","text":"src/Audio/AudioManager.hpp Namespaces Name Engine::Audio Engine This namespace contains all of the necessary engine components. Classes Name class Engine::Audio::AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Audio/AudioManager.hpp"},{"location":"Files/AudioManager_8hpp/#srcaudioaudiomanagerhpp","text":"","title":"src/Audio/AudioManager.hpp"},{"location":"Files/AudioManager_8hpp/#namespaces","text":"Name Engine::Audio Engine This namespace contains all of the necessary engine components.","title":"Namespaces"},{"location":"Files/AudioManager_8hpp/#classes","text":"Name class Engine::Audio::AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. Updated on 13 November 2019 at 20:24:15 UTC","title":"Classes"},{"location":"Files/Audio_8hpp/","text":"src/Audio/Audio.hpp Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Audio/Audio.hpp"},{"location":"Files/Audio_8hpp/#srcaudioaudiohpp","text":"Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Audio/Audio.hpp"},{"location":"Files/Config_8hpp/","text":"src/Utils/Config.hpp Defines Name ENGINE_ARCH ENGINE_VERSION Autogenerated version string by CMake. Macro Documentation define ENGINE_ARCH #define ENGINE_ARCH \"amd64\" define ENGINE_VERSION #define ENGINE_VERSION \"v1.0.1\" Autogenerated version string by CMake. Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Utils/Config.hpp"},{"location":"Files/Config_8hpp/#srcutilsconfighpp","text":"","title":"src/Utils/Config.hpp"},{"location":"Files/Config_8hpp/#defines","text":"Name ENGINE_ARCH ENGINE_VERSION Autogenerated version string by CMake.","title":"Defines"},{"location":"Files/Config_8hpp/#macro-documentation","text":"","title":"Macro Documentation"},{"location":"Files/Config_8hpp/#define-engine_arch","text":"#define ENGINE_ARCH \"amd64\"","title":"define ENGINE_ARCH"},{"location":"Files/Config_8hpp/#define-engine_version","text":"#define ENGINE_VERSION \"v1.0.1\" Autogenerated version string by CMake. Updated on 13 November 2019 at 20:24:15 UTC","title":"define ENGINE_VERSION"},{"location":"Files/Engine_8hpp/","text":"src/Engine.hpp Namespaces Name Engine This namespace contains all of the necessary engine components. Functions Name std::string someGlobalFunc () Some global extern function. Functions Documentation function someGlobalFunc std::string someGlobalFunc() Some global extern function. Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Engine.hpp"},{"location":"Files/Engine_8hpp/#srcenginehpp","text":"","title":"src/Engine.hpp"},{"location":"Files/Engine_8hpp/#namespaces","text":"Name Engine This namespace contains all of the necessary engine components.","title":"Namespaces"},{"location":"Files/Engine_8hpp/#functions","text":"Name std::string someGlobalFunc () Some global extern function.","title":"Functions"},{"location":"Files/Engine_8hpp/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Files/Engine_8hpp/#function-someglobalfunc","text":"std::string someGlobalFunc() Some global extern function. Updated on 13 November 2019 at 20:24:15 UTC","title":"function someGlobalFunc"},{"location":"Files/Exception_8hpp/","text":"src/Exception.hpp Namespaces Name Engine This namespace contains all of the necessary engine components. Classes Name class Engine::Exception Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Exception.hpp"},{"location":"Files/Exception_8hpp/#srcexceptionhpp","text":"","title":"src/Exception.hpp"},{"location":"Files/Exception_8hpp/#namespaces","text":"Name Engine This namespace contains all of the necessary engine components.","title":"Namespaces"},{"location":"Files/Exception_8hpp/#classes","text":"Name class Engine::Exception Updated on 13 November 2019 at 20:24:15 UTC","title":"Classes"},{"location":"Files/Framebuffer_8hpp/","text":"src/Graphics/Framebuffer.hpp Namespaces Name Engine::Graphics Engine This namespace contains all of the necessary engine components. Classes Name class Engine::Graphics::Framebuffer Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Graphics/Framebuffer.hpp"},{"location":"Files/Framebuffer_8hpp/#srcgraphicsframebufferhpp","text":"","title":"src/Graphics/Framebuffer.hpp"},{"location":"Files/Framebuffer_8hpp/#namespaces","text":"Name Engine::Graphics Engine This namespace contains all of the necessary engine components.","title":"Namespaces"},{"location":"Files/Framebuffer_8hpp/#classes","text":"Name class Engine::Graphics::Framebuffer Updated on 13 November 2019 at 20:24:15 UTC","title":"Classes"},{"location":"Files/Graphics_8hpp/","text":"src/Graphics/Graphics.hpp Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Graphics/Graphics.hpp"},{"location":"Files/Graphics_8hpp/#srcgraphicsgraphicshpp","text":"Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Graphics/Graphics.hpp"},{"location":"Files/Handle_8hpp/","text":"src/Graphics/Handle.hpp Namespaces Name Engine::Graphics Engine This namespace contains all of the necessary engine components. Classes Name class Engine::Graphics::Handle Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Graphics/Handle.hpp"},{"location":"Files/Handle_8hpp/#srcgraphicshandlehpp","text":"","title":"src/Graphics/Handle.hpp"},{"location":"Files/Handle_8hpp/#namespaces","text":"Name Engine::Graphics Engine This namespace contains all of the necessary engine components.","title":"Namespaces"},{"location":"Files/Handle_8hpp/#classes","text":"Name class Engine::Graphics::Handle Updated on 13 November 2019 at 20:24:15 UTC","title":"Classes"},{"location":"Files/Log_8hpp/","text":"src/Utils/Log.hpp Defines Name LOG_DEBUG (MSG, ...) Macro Documentation define LOG_DEBUG #define LOG_DEBUG( MSG, ... ) printf(MSG, ##__VA_ARGS__) Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Utils/Log.hpp"},{"location":"Files/Log_8hpp/#srcutilsloghpp","text":"","title":"src/Utils/Log.hpp"},{"location":"Files/Log_8hpp/#defines","text":"Name LOG_DEBUG (MSG, ...)","title":"Defines"},{"location":"Files/Log_8hpp/#macro-documentation","text":"","title":"Macro Documentation"},{"location":"Files/Log_8hpp/#define-log_debug","text":"#define LOG_DEBUG( MSG, ... ) printf(MSG, ##__VA_ARGS__) Updated on 13 November 2019 at 20:24:15 UTC","title":"define LOG_DEBUG"},{"location":"Files/Path_8hpp/","text":"src/Utils/Path.hpp Namespaces Name Engine::Utils::Path Filesystem path utility functions. Engine::Utils Engine This namespace contains all of the necessary engine components. Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Utils/Path.hpp"},{"location":"Files/Path_8hpp/#srcutilspathhpp","text":"","title":"src/Utils/Path.hpp"},{"location":"Files/Path_8hpp/#namespaces","text":"Name Engine::Utils::Path Filesystem path utility functions. Engine::Utils Engine This namespace contains all of the necessary engine components. Updated on 13 November 2019 at 20:24:15 UTC","title":"Namespaces"},{"location":"Files/Renderer_8hpp/","text":"src/Graphics/Renderer.hpp Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Graphics/Renderer.hpp"},{"location":"Files/Renderer_8hpp/#srcgraphicsrendererhpp","text":"Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Graphics/Renderer.hpp"},{"location":"Files/Texture2D_8hpp/","text":"src/Graphics/Texture2D.hpp Namespaces Name Engine::Graphics Engine This namespace contains all of the necessary engine components. Classes Name class Engine::Graphics::Texture2D Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Graphics/Texture2D.hpp"},{"location":"Files/Texture2D_8hpp/#srcgraphicstexture2dhpp","text":"","title":"src/Graphics/Texture2D.hpp"},{"location":"Files/Texture2D_8hpp/#namespaces","text":"Name Engine::Graphics Engine This namespace contains all of the necessary engine components.","title":"Namespaces"},{"location":"Files/Texture2D_8hpp/#classes","text":"Name class Engine::Graphics::Texture2D Updated on 13 November 2019 at 20:24:15 UTC","title":"Classes"},{"location":"Files/Texture3D_8hpp/","text":"src/Graphics/Texture3D.hpp Namespaces Name Engine::Graphics Engine This namespace contains all of the necessary engine components. Classes Name class Engine::Graphics::Texture3D Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Graphics/Texture3D.hpp"},{"location":"Files/Texture3D_8hpp/#srcgraphicstexture3dhpp","text":"","title":"src/Graphics/Texture3D.hpp"},{"location":"Files/Texture3D_8hpp/#namespaces","text":"Name Engine::Graphics Engine This namespace contains all of the necessary engine components.","title":"Namespaces"},{"location":"Files/Texture3D_8hpp/#classes","text":"Name class Engine::Graphics::Texture3D Updated on 13 November 2019 at 20:24:15 UTC","title":"Classes"},{"location":"Files/Texture_8hpp/","text":"src/Graphics/Texture.hpp Namespaces Name Engine::Graphics Engine This namespace contains all of the necessary engine components. Classes Name interface Engine::Graphics::Texture This is a base texture class that serves as a base class for other texture types. Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Graphics/Texture.hpp"},{"location":"Files/Texture_8hpp/#srcgraphicstexturehpp","text":"","title":"src/Graphics/Texture.hpp"},{"location":"Files/Texture_8hpp/#namespaces","text":"Name Engine::Graphics Engine This namespace contains all of the necessary engine components.","title":"Namespaces"},{"location":"Files/Texture_8hpp/#classes","text":"Name interface Engine::Graphics::Texture This is a base texture class that serves as a base class for other texture types. Updated on 13 November 2019 at 20:24:15 UTC","title":"Classes"},{"location":"Files/Utils_8hpp/","text":"src/Utils/Utils.hpp Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Utils/Utils.hpp"},{"location":"Files/Utils_8hpp/#srcutilsutilshpp","text":"Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Utils/Utils.hpp"},{"location":"Files/dir_3419e189e460663ec2c964233bf8dcd6/","text":"src/Graphics Files Name src/Graphics/Texture3D.hpp src/Graphics/Texture2D.hpp src/Graphics/Texture.hpp src/Graphics/Renderer.hpp src/Graphics/Handle.hpp src/Graphics/Graphics.hpp src/Graphics/Framebuffer.hpp Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Graphics"},{"location":"Files/dir_3419e189e460663ec2c964233bf8dcd6/#srcgraphics","text":"","title":"src/Graphics"},{"location":"Files/dir_3419e189e460663ec2c964233bf8dcd6/#files","text":"Name src/Graphics/Texture3D.hpp src/Graphics/Texture2D.hpp src/Graphics/Texture.hpp src/Graphics/Renderer.hpp src/Graphics/Handle.hpp src/Graphics/Graphics.hpp src/Graphics/Framebuffer.hpp Updated on 13 November 2019 at 20:24:15 UTC","title":"Files"},{"location":"Files/dir_68267d1309a1af8e8297ef4c3efbcdba/","text":"src Directories Name src/Utils src/Graphics src/Audio src/Assets Files Name src/Exception.hpp src/Engine.hpp Updated on 13 November 2019 at 20:24:15 UTC","title":"src"},{"location":"Files/dir_68267d1309a1af8e8297ef4c3efbcdba/#src","text":"","title":"src"},{"location":"Files/dir_68267d1309a1af8e8297ef4c3efbcdba/#directories","text":"Name src/Utils src/Graphics src/Audio src/Assets","title":"Directories"},{"location":"Files/dir_68267d1309a1af8e8297ef4c3efbcdba/#files","text":"Name src/Exception.hpp src/Engine.hpp Updated on 13 November 2019 at 20:24:15 UTC","title":"Files"},{"location":"Files/dir_a7363e98f9e0bdd87618633653859815/","text":"src/Utils Files Name src/Utils/Utils.hpp src/Utils/Path.hpp src/Utils/Log.hpp src/Utils/Config.hpp src/Utils/ArrayView.hpp Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Utils"},{"location":"Files/dir_a7363e98f9e0bdd87618633653859815/#srcutils","text":"","title":"src/Utils"},{"location":"Files/dir_a7363e98f9e0bdd87618633653859815/#files","text":"Name src/Utils/Utils.hpp src/Utils/Path.hpp src/Utils/Log.hpp src/Utils/Config.hpp src/Utils/ArrayView.hpp Updated on 13 November 2019 at 20:24:15 UTC","title":"Files"},{"location":"Files/dir_c64386e93f356b78d4612c7b7741707c/","text":"src/Audio Files Name src/Audio/AudioManager.hpp src/Audio/AudioBuffer.hpp src/Audio/Audio.hpp Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Audio"},{"location":"Files/dir_c64386e93f356b78d4612c7b7741707c/#srcaudio","text":"","title":"src/Audio"},{"location":"Files/dir_c64386e93f356b78d4612c7b7741707c/#files","text":"Name src/Audio/AudioManager.hpp src/Audio/AudioBuffer.hpp src/Audio/Audio.hpp Updated on 13 November 2019 at 20:24:15 UTC","title":"Files"},{"location":"Files/dir_e0c1ede47f21c4a643a1257f949f98e0/","text":"src/Assets Files Name src/Assets/Assets.hpp src/Assets/Asset.hpp Updated on 13 November 2019 at 20:24:15 UTC","title":"src/Assets"},{"location":"Files/dir_e0c1ede47f21c4a643a1257f949f98e0/#srcassets","text":"","title":"src/Assets"},{"location":"Files/dir_e0c1ede47f21c4a643a1257f949f98e0/#files","text":"Name src/Assets/Assets.hpp src/Assets/Asset.hpp Updated on 13 November 2019 at 20:24:15 UTC","title":"Files"},{"location":"Modules/group__Assets/","text":"Generic assets Module: An example game engine This is a brief description to the assets group. More... Classes Name class Engine::Assets::Asset union Engine::Assets::Asset::Event Detailed Description This is a brief description to the assets group. Some detailed description here Updated on 13 November 2019 at 20:24:15 UTC","title":"Generic assets"},{"location":"Modules/group__Assets/#generic-assets","text":"Module: An example game engine This is a brief description to the assets group. More...","title":"Generic assets"},{"location":"Modules/group__Assets/#classes","text":"Name class Engine::Assets::Asset union Engine::Assets::Asset::Event","title":"Classes"},{"location":"Modules/group__Assets/#detailed-description","text":"This is a brief description to the assets group. Some detailed description here Updated on 13 November 2019 at 20:24:15 UTC","title":"Detailed Description"},{"location":"Modules/group__Audio/","text":"Audio buffers and devices Module: An example game engine This is a brief description to the audio group. More... Classes Name class Engine::Audio::AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. class Engine::Audio::AudioBuffer A simple audio buffer to hold PCM samples Detailed Description This is a brief description to the audio group. Some detailed description here Updated on 13 November 2019 at 20:24:15 UTC","title":"Audio buffers and devices"},{"location":"Modules/group__Audio/#audio-buffers-and-devices","text":"Module: An example game engine This is a brief description to the audio group. More...","title":"Audio buffers and devices"},{"location":"Modules/group__Audio/#classes","text":"Name class Engine::Audio::AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. class Engine::Audio::AudioBuffer A simple audio buffer to hold PCM samples","title":"Classes"},{"location":"Modules/group__Audio/#detailed-description","text":"This is a brief description to the audio group. Some detailed description here Updated on 13 November 2019 at 20:24:15 UTC","title":"Detailed Description"},{"location":"Modules/group__Engine/","text":"An example game engine This is a brief description to the engine group. More... Modules Name Some useful utilities This is a brief description to the utils group. Graphical related classes This is a brief description to the graphics group. Audio buffers and devices This is a brief description to the audio group. Generic assets This is a brief description to the assets group. Namespaces Name Engine This namespace contains all of the necessary engine components. Classes Name class Engine::Exception Detailed Description This is a brief description to the engine group. Some detailed description here Updated on 13 November 2019 at 20:24:15 UTC","title":"An example game engine"},{"location":"Modules/group__Engine/#an-example-game-engine","text":"This is a brief description to the engine group. More...","title":"An example game engine"},{"location":"Modules/group__Engine/#modules","text":"Name Some useful utilities This is a brief description to the utils group. Graphical related classes This is a brief description to the graphics group. Audio buffers and devices This is a brief description to the audio group. Generic assets This is a brief description to the assets group.","title":"Modules"},{"location":"Modules/group__Engine/#namespaces","text":"Name Engine This namespace contains all of the necessary engine components.","title":"Namespaces"},{"location":"Modules/group__Engine/#classes","text":"Name class Engine::Exception","title":"Classes"},{"location":"Modules/group__Engine/#detailed-description","text":"This is a brief description to the engine group. Some detailed description here Updated on 13 November 2019 at 20:24:15 UTC","title":"Detailed Description"},{"location":"Modules/group__Graphics/","text":"Graphical related classes Module: An example game engine This is a brief description to the graphics group. More... Classes Name interface Engine::Graphics::Texture This is a base texture class that serves as a base class for other texture types. class Engine::Graphics::Texture3D class Engine::Graphics::Texture2D class Engine::Graphics::Handle class Engine::Graphics::Framebuffer Functions Name int getHandle (Handle & handle) Some namespace inline function. Detailed Description This is a brief description to the graphics group. Some detailed description here Functions Documentation function getHandle inline int getHandle( Handle & handle ) Some namespace inline function. Updated on 13 November 2019 at 20:24:15 UTC","title":"Graphical related classes"},{"location":"Modules/group__Graphics/#graphical-related-classes","text":"Module: An example game engine This is a brief description to the graphics group. More...","title":"Graphical related classes"},{"location":"Modules/group__Graphics/#classes","text":"Name interface Engine::Graphics::Texture This is a base texture class that serves as a base class for other texture types. class Engine::Graphics::Texture3D class Engine::Graphics::Texture2D class Engine::Graphics::Handle class Engine::Graphics::Framebuffer","title":"Classes"},{"location":"Modules/group__Graphics/#functions","text":"Name int getHandle (Handle & handle) Some namespace inline function.","title":"Functions"},{"location":"Modules/group__Graphics/#detailed-description","text":"This is a brief description to the graphics group. Some detailed description here","title":"Detailed Description"},{"location":"Modules/group__Graphics/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Modules/group__Graphics/#function-gethandle","text":"inline int getHandle( Handle & handle ) Some namespace inline function. Updated on 13 November 2019 at 20:24:15 UTC","title":"function getHandle"},{"location":"Modules/group__Utils/","text":"Some useful utilities Module: An example game engine This is a brief description to the utils group. More... Namespaces Name Engine::Utils::Path Filesystem path utility functions. Classes Name class Engine::Utils::ArrayView Filesystem path utility functions. Defines Name LOG_DEBUG (MSG, ...) ENGINE_VERSION Autogenerated version string by CMake. Detailed Description This is a brief description to the utils group. Some detailed description here Macro Documentation define LOG_DEBUG #define LOG_DEBUG( MSG, ... ) printf(MSG, ##__VA_ARGS__) define ENGINE_VERSION #define ENGINE_VERSION \"v1.0.1\" Autogenerated version string by CMake. Updated on 13 November 2019 at 20:24:15 UTC","title":"Some useful utilities"},{"location":"Modules/group__Utils/#some-useful-utilities","text":"Module: An example game engine This is a brief description to the utils group. More...","title":"Some useful utilities"},{"location":"Modules/group__Utils/#namespaces","text":"Name Engine::Utils::Path Filesystem path utility functions.","title":"Namespaces"},{"location":"Modules/group__Utils/#classes","text":"Name class Engine::Utils::ArrayView Filesystem path utility functions.","title":"Classes"},{"location":"Modules/group__Utils/#defines","text":"Name LOG_DEBUG (MSG, ...) ENGINE_VERSION Autogenerated version string by CMake.","title":"Defines"},{"location":"Modules/group__Utils/#detailed-description","text":"This is a brief description to the utils group. Some detailed description here","title":"Detailed Description"},{"location":"Modules/group__Utils/#macro-documentation","text":"","title":"Macro Documentation"},{"location":"Modules/group__Utils/#define-log_debug","text":"#define LOG_DEBUG( MSG, ... ) printf(MSG, ##__VA_ARGS__)","title":"define LOG_DEBUG"},{"location":"Modules/group__Utils/#define-engine_version","text":"#define ENGINE_VERSION \"v1.0.1\" Autogenerated version string by CMake. Updated on 13 November 2019 at 20:24:15 UTC","title":"define ENGINE_VERSION"},{"location":"Namespaces/namespaceEngine/","text":"Engine Module: An example game engine This namespace contains all of the necessary engine components. More... Namespaces Name Engine::Utils Engine::Graphics Engine::Audio Engine::Assets Classes Name class Engine::Exception Functions Name std::string getVersion () Detailed Description This namespace contains all of the necessary engine components. See : Engine::Assets Engine::Audio Engine::Graphics Engine::Utils Functions Documentation function getVersion std::string getVersion() Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine"},{"location":"Namespaces/namespaceEngine/#engine","text":"Module: An example game engine This namespace contains all of the necessary engine components. More...","title":"Engine"},{"location":"Namespaces/namespaceEngine/#namespaces","text":"Name Engine::Utils Engine::Graphics Engine::Audio Engine::Assets","title":"Namespaces"},{"location":"Namespaces/namespaceEngine/#classes","text":"Name class Engine::Exception","title":"Classes"},{"location":"Namespaces/namespaceEngine/#functions","text":"Name std::string getVersion ()","title":"Functions"},{"location":"Namespaces/namespaceEngine/#detailed-description","text":"This namespace contains all of the necessary engine components. See : Engine::Assets Engine::Audio Engine::Graphics Engine::Utils","title":"Detailed Description"},{"location":"Namespaces/namespaceEngine/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Namespaces/namespaceEngine/#function-getversion","text":"std::string getVersion() Updated on 13 November 2019 at 20:24:15 UTC","title":"function getVersion"},{"location":"Namespaces/namespaceEngine_1_1Assets/","text":"Engine::Assets Classes Name class Engine::Assets::Asset Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Assets"},{"location":"Namespaces/namespaceEngine_1_1Assets/#engineassets","text":"","title":"Engine::Assets"},{"location":"Namespaces/namespaceEngine_1_1Assets/#classes","text":"Name class Engine::Assets::Asset Updated on 13 November 2019 at 20:24:15 UTC","title":"Classes"},{"location":"Namespaces/namespaceEngine_1_1Audio/","text":"Engine::Audio Classes Name class Engine::Audio::AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. class Engine::Audio::AudioBuffer A simple audio buffer to hold PCM samples Functions Name void doSomething ( AudioBuffer & buffer) Do something with the buffer. Functions Documentation function doSomething void doSomething( AudioBuffer & buffer ) Do something with the buffer. Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Audio"},{"location":"Namespaces/namespaceEngine_1_1Audio/#engineaudio","text":"","title":"Engine::Audio"},{"location":"Namespaces/namespaceEngine_1_1Audio/#classes","text":"Name class Engine::Audio::AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. class Engine::Audio::AudioBuffer A simple audio buffer to hold PCM samples","title":"Classes"},{"location":"Namespaces/namespaceEngine_1_1Audio/#functions","text":"Name void doSomething ( AudioBuffer & buffer) Do something with the buffer.","title":"Functions"},{"location":"Namespaces/namespaceEngine_1_1Audio/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Namespaces/namespaceEngine_1_1Audio/#function-dosomething","text":"void doSomething( AudioBuffer & buffer ) Do something with the buffer. Updated on 13 November 2019 at 20:24:15 UTC","title":"function doSomething"},{"location":"Namespaces/namespaceEngine_1_1Graphics/","text":"Engine::Graphics Classes Name class Engine::Graphics::Texture3D class Engine::Graphics::Texture2D interface Engine::Graphics::Texture This is a base texture class that serves as a base class for other texture types. class Engine::Graphics::Handle class Engine::Graphics::Framebuffer Functions Name int getHandle ( Handle & handle) Some namespace inline function. Functions Documentation function getHandle inline int getHandle( Handle & handle ) Some namespace inline function. Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Graphics"},{"location":"Namespaces/namespaceEngine_1_1Graphics/#enginegraphics","text":"","title":"Engine::Graphics"},{"location":"Namespaces/namespaceEngine_1_1Graphics/#classes","text":"Name class Engine::Graphics::Texture3D class Engine::Graphics::Texture2D interface Engine::Graphics::Texture This is a base texture class that serves as a base class for other texture types. class Engine::Graphics::Handle class Engine::Graphics::Framebuffer","title":"Classes"},{"location":"Namespaces/namespaceEngine_1_1Graphics/#functions","text":"Name int getHandle ( Handle & handle) Some namespace inline function.","title":"Functions"},{"location":"Namespaces/namespaceEngine_1_1Graphics/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Namespaces/namespaceEngine_1_1Graphics/#function-gethandle","text":"inline int getHandle( Handle & handle ) Some namespace inline function. Updated on 13 November 2019 at 20:24:15 UTC","title":"function getHandle"},{"location":"Namespaces/namespaceEngine_1_1Utils/","text":"Engine::Utils Namespaces Name Engine::Utils::Path Filesystem path utility functions. Classes Name class Engine::Utils::ArrayView Filesystem path utility functions. Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Utils"},{"location":"Namespaces/namespaceEngine_1_1Utils/#engineutils","text":"","title":"Engine::Utils"},{"location":"Namespaces/namespaceEngine_1_1Utils/#namespaces","text":"Name Engine::Utils::Path Filesystem path utility functions.","title":"Namespaces"},{"location":"Namespaces/namespaceEngine_1_1Utils/#classes","text":"Name class Engine::Utils::ArrayView Filesystem path utility functions. Updated on 13 November 2019 at 20:24:15 UTC","title":"Classes"},{"location":"Namespaces/namespaceEngine_1_1Utils_1_1Path/","text":"Engine::Utils::Path Module: An example game engine / Some useful utilities Filesystem path utility functions. Functions Name std::string getExtension (const std::string & path) std::string getFilename (const std::string & path) Functions Documentation function getExtension std::string getExtension( const std::string & path ) function getFilename std::string getFilename( const std::string & path ) Updated on 13 November 2019 at 20:24:15 UTC","title":"Engine::Utils::Path"},{"location":"Namespaces/namespaceEngine_1_1Utils_1_1Path/#engineutilspath","text":"Module: An example game engine / Some useful utilities Filesystem path utility functions.","title":"Engine::Utils::Path"},{"location":"Namespaces/namespaceEngine_1_1Utils_1_1Path/#functions","text":"Name std::string getExtension (const std::string & path) std::string getFilename (const std::string & path)","title":"Functions"},{"location":"Namespaces/namespaceEngine_1_1Utils_1_1Path/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Namespaces/namespaceEngine_1_1Utils_1_1Path/#function-getextension","text":"std::string getExtension( const std::string & path )","title":"function getExtension"},{"location":"Namespaces/namespaceEngine_1_1Utils_1_1Path/#function-getfilename","text":"std::string getFilename( const std::string & path ) Updated on 13 November 2019 at 20:24:15 UTC","title":"function getFilename"},{"location":"Pages/advanced/","text":"Advanced Usage This page is for advanced users. Make sure you have first read the introduction . Updated on 13 November 2019 at 20:24:15 UTC","title":"Advanced Usage"},{"location":"Pages/advanced/#advanced-usage","text":"This page is for advanced users. Make sure you have first read the introduction . Updated on 13 November 2019 at 20:24:15 UTC","title":"Advanced Usage"},{"location":"Pages/bug/","text":"Bug List Class Engine::Audio::AudioBuffer Some random bug Some other random bug Class Engine::Graphics::Texture This has some weird bug too! Updated on 13 November 2019 at 20:24:15 UTC","title":"Bug List"},{"location":"Pages/bug/#bug-list","text":"Class Engine::Audio::AudioBuffer Some random bug Some other random bug Class Engine::Graphics::Texture This has some weird bug too! Updated on 13 November 2019 at 20:24:15 UTC","title":"Bug List"},{"location":"Pages/intro/","text":"Introduction This page introduces the user to the topic. Now you can proceed to the advanced section . Updated on 13 November 2019 at 20:24:15 UTC","title":"Introduction"},{"location":"Pages/intro/#introduction","text":"This page introduces the user to the topic. Now you can proceed to the advanced section . Updated on 13 November 2019 at 20:24:15 UTC","title":"Introduction"},{"location":"Pages/test/","text":"Test List Class Engine::Audio::AudioBuffer Some random test description Updated on 13 November 2019 at 20:24:15 UTC","title":"Test List"},{"location":"Pages/test/#test-list","text":"Class Engine::Audio::AudioBuffer Some random test description Updated on 13 November 2019 at 20:24:15 UTC","title":"Test List"},{"location":"Pages/todo/","text":"Todo List Class Engine::Audio::AudioBuffer Some random todo Updated on 13 November 2019 at 20:24:15 UTC","title":"Todo List"},{"location":"Pages/todo/#todo-list","text":"Class Engine::Audio::AudioBuffer Some random todo Updated on 13 November 2019 at 20:24:15 UTC","title":"Todo List"}]}