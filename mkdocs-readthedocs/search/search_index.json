{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Doxydown Example This is an example of Doxydown markdown output for MkDocs ReadTheDocs theme.","title":"Doxydown Example"},{"location":"#doxydown-example","text":"This is an example of Doxydown markdown output for MkDocs ReadTheDocs theme.","title":"Doxydown Example"},{"location":"api/index_classes/","text":"namespace Engine This namespace contains all of the necessary engine components. namespace Assets class Asset union Event struct Loaded struct Unloaded struct Waiting namespace Audio class AudioBuffer A simple audio buffer to hold PCM samples struct TypedAudioData Use this to populate the buffer. class AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. class Exception namespace Graphics class Framebuffer class Handle class Texture2D class Texture3D namespace Utils class ArrayView Filesystem path utility functions. namespace Path Filesystem path utility functions. Created on 2019-10-31","title":"Classes"},{"location":"api/index_groups/","text":"group Engine This is a brief description to the engine group. group Assets This is a brief description to the assets group. group Audio This is a brief description to the audio group. group Graphics This is a brief description to the graphics group. group Utils This is a brief description to the utils group. Created on 2019-10-31","title":"Modules"},{"location":"api/index_namespaces/","text":"namespace Engine This namespace contains all of the necessary engine components. namespace Assets namespace Audio namespace Graphics namespace Utils namespace Path Filesystem path utility functions. Created on 2019-10-31","title":"Namespaces"},{"location":"api/Classes/classEngine_1_1Assets_1_1Asset/","text":"Engine::Assets::Asset Reference #include <Asset.hpp> Public Classes Name union Event Public Functions Name functions getEvent () const Returns the current status of the asset. virtual functions unload () Call this method to unload the asset. virtual functions load () Call this method to load the asset. virtual functions ~Asset () =0 functions Asset (const std::string & name) Public Functions Documentation function getEvent inline const Event & getEvent() const Returns the current status of the asset. Use this to determine the state, for example if the assets is being loaded or unloaded. function unload virtual void unload() Call this method to unload the asset. function load virtual void load() Call this method to load the asset. function ~Asset virtual ~Asset() =0 function Asset explicit Asset( const std::string & name ) Created on 2019-10-31","title":"Engine::Assets::Asset"},{"location":"api/Classes/classEngine_1_1Assets_1_1Asset/#engineassetsasset-reference","text":"#include <Asset.hpp>","title":"Engine::Assets::Asset Reference"},{"location":"api/Classes/classEngine_1_1Assets_1_1Asset/#public-classes","text":"Name union Event","title":"Public Classes"},{"location":"api/Classes/classEngine_1_1Assets_1_1Asset/#public-functions","text":"Name functions getEvent () const Returns the current status of the asset. virtual functions unload () Call this method to unload the asset. virtual functions load () Call this method to load the asset. virtual functions ~Asset () =0 functions Asset (const std::string & name)","title":"Public Functions"},{"location":"api/Classes/classEngine_1_1Assets_1_1Asset/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/Classes/classEngine_1_1Assets_1_1Asset/#function-getevent","text":"inline const Event & getEvent() const Returns the current status of the asset. Use this to determine the state, for example if the assets is being loaded or unloaded.","title":"function getEvent"},{"location":"api/Classes/classEngine_1_1Assets_1_1Asset/#function-unload","text":"virtual void unload() Call this method to unload the asset.","title":"function unload"},{"location":"api/Classes/classEngine_1_1Assets_1_1Asset/#function-load","text":"virtual void load() Call this method to load the asset.","title":"function load"},{"location":"api/Classes/classEngine_1_1Assets_1_1Asset/#function-asset","text":"virtual ~Asset() =0","title":"function ~Asset"},{"location":"api/Classes/classEngine_1_1Assets_1_1Asset/#function-asset_1","text":"explicit Asset( const std::string & name ) Created on 2019-10-31","title":"function Asset"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/","text":"Engine::Audio::AudioBuffer Reference A simple audio buffer to hold PCM samples More... #include <AudioBuffer.hpp> Public Classes Name struct TypedAudioData Use this to populate the buffer. Public Types Name typedef types AudioData enum types Type { UNKNOWN, INT8, INT16, INT24, INT32, FLOAT32 } Different type of audio formats. Public Functions Name functions setData (const TypedAudioData & data) functions loop ( AudioManager & manager) const Loop this buffer forever. functions stop ( AudioManager & manager) const Stop this buffer playing. functions play ( AudioManager & manager) const Play this buffer. virtual functions ~AudioBuffer () =default Audio::AudioBuffer destructor. functions AudioBuffer (const std::string & filename) Constructor for Audio::AudioBuffer . Protected Functions Name functions getData () Protected Attributes Name attributes playing Friends Name friends Audio::doSomething ( AudioBuffer & buffer) friends AudioManager () Detailed Description A simple audio buffer to hold PCM samples Author : Matus Novak Date : 2017-2019 Pre : First initialize the system. Test : Some random test description Warning : Some random warning Note : Some random note Note : Some second random note Bug : Some random bug Lorem ipsum donor Public Types Documentation typedef AudioData typedef Utils::ArrayView< uint8_t > AudioData; enum Type enum Type { UNKNOWN, INT8, INT16, INT24, INT32, FLOAT32 } Different type of audio formats. Public Functions Documentation function setData void setData( const TypedAudioData & data ) function loop void loop( AudioManager & manager ) const Loop this buffer forever. Note : This will loop forever until you call stop managerWhich manager to loop the sound with Exception If this buffer is already looping function stop void stop( AudioManager & manager ) const Stop this buffer playing. managerWhich manager to stop the sound with Exception If this buffer is already stopped function play void play( AudioManager & manager ) const Play this buffer. managerWhich manager to play the sound with Exception If this buffer is already playing function ~AudioBuffer virtual ~AudioBuffer() =default Audio::AudioBuffer destructor. function AudioBuffer explicit AudioBuffer( const std::string & filename ) Constructor for Audio::AudioBuffer . Protected Functions Documentation function getData float * getData() Protected Attributes Documentation variable playing bool playing {false}; Friends friend Audio::doSomething friend void Audio::doSomething( AudioBuffer & buffer ); friend AudioManager friend class AudioManager(); Created on 2019-10-31","title":"Engine::Audio::AudioBuffer"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#engineaudioaudiobuffer-reference","text":"A simple audio buffer to hold PCM samples More... #include <AudioBuffer.hpp>","title":"Engine::Audio::AudioBuffer Reference"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-classes","text":"Name struct TypedAudioData Use this to populate the buffer.","title":"Public Classes"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-types","text":"Name typedef types AudioData enum types Type { UNKNOWN, INT8, INT16, INT24, INT32, FLOAT32 } Different type of audio formats.","title":"Public Types"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-functions","text":"Name functions setData (const TypedAudioData & data) functions loop ( AudioManager & manager) const Loop this buffer forever. functions stop ( AudioManager & manager) const Stop this buffer playing. functions play ( AudioManager & manager) const Play this buffer. virtual functions ~AudioBuffer () =default Audio::AudioBuffer destructor. functions AudioBuffer (const std::string & filename) Constructor for Audio::AudioBuffer .","title":"Public Functions"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-functions","text":"Name functions getData ()","title":"Protected Functions"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-attributes","text":"Name attributes playing","title":"Protected Attributes"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#friends","text":"Name friends Audio::doSomething ( AudioBuffer & buffer) friends AudioManager ()","title":"Friends"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#detailed-description","text":"A simple audio buffer to hold PCM samples Author : Matus Novak Date : 2017-2019 Pre : First initialize the system. Test : Some random test description Warning : Some random warning Note : Some random note Note : Some second random note Bug : Some random bug Lorem ipsum donor","title":"Detailed Description"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#typedef-audiodata","text":"typedef Utils::ArrayView< uint8_t > AudioData;","title":"typedef AudioData"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#enum-type","text":"enum Type { UNKNOWN, INT8, INT16, INT24, INT32, FLOAT32 } Different type of audio formats.","title":"enum Type"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-setdata","text":"void setData( const TypedAudioData & data )","title":"function setData"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-loop","text":"void loop( AudioManager & manager ) const Loop this buffer forever. Note : This will loop forever until you call stop managerWhich manager to loop the sound with Exception If this buffer is already looping","title":"function loop"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-stop","text":"void stop( AudioManager & manager ) const Stop this buffer playing. managerWhich manager to stop the sound with Exception If this buffer is already stopped","title":"function stop"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-play","text":"void play( AudioManager & manager ) const Play this buffer. managerWhich manager to play the sound with Exception If this buffer is already playing","title":"function play"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-audiobuffer","text":"virtual ~AudioBuffer() =default Audio::AudioBuffer destructor.","title":"function ~AudioBuffer"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-audiobuffer_1","text":"explicit AudioBuffer( const std::string & filename ) Constructor for Audio::AudioBuffer .","title":"function AudioBuffer"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#function-getdata","text":"float * getData()","title":"function getData"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#variable-playing","text":"bool playing {false};","title":"variable playing"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#friends_1","text":"","title":"Friends"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#friend-audiodosomething","text":"friend void Audio::doSomething( AudioBuffer & buffer );","title":"friend Audio::doSomething"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioBuffer/#friend-audiomanager","text":"friend class AudioManager(); Created on 2019-10-31","title":"friend AudioManager"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioManager/","text":"Engine::Audio::AudioManager Reference An audio manager that accepts multiple Audio::AudioBuffer instances. More... #include <AudioManager.hpp> Public Functions Name functions enque (const AudioBuffer & buffer) functions ~AudioManager () functions AudioManager (int numOfChannels =128) Detailed Description An audio manager that accepts multiple Audio::AudioBuffer instances. See : Audio::AudioBuffer Lorem Ipsum Donor. Some Random link with bold and italics And the following is a typewritter font. And here is some list items: First item Second item Third item with bold text Public Functions Documentation function enque void enque( const AudioBuffer & buffer ) function ~AudioManager ~AudioManager() function AudioManager AudioManager( int numOfChannels =128 ) Created on 2019-10-31","title":"Engine::Audio::AudioManager"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioManager/#engineaudioaudiomanager-reference","text":"An audio manager that accepts multiple Audio::AudioBuffer instances. More... #include <AudioManager.hpp>","title":"Engine::Audio::AudioManager Reference"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioManager/#public-functions","text":"Name functions enque (const AudioBuffer & buffer) functions ~AudioManager () functions AudioManager (int numOfChannels =128)","title":"Public Functions"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioManager/#detailed-description","text":"An audio manager that accepts multiple Audio::AudioBuffer instances. See : Audio::AudioBuffer Lorem Ipsum Donor. Some Random link with bold and italics And the following is a typewritter font. And here is some list items: First item Second item Third item with bold text","title":"Detailed Description"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioManager/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioManager/#function-enque","text":"void enque( const AudioBuffer & buffer )","title":"function enque"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioManager/#function-audiomanager","text":"~AudioManager()","title":"function ~AudioManager"},{"location":"api/Classes/classEngine_1_1Audio_1_1AudioManager/#function-audiomanager_1","text":"AudioManager( int numOfChannels =128 ) Created on 2019-10-31","title":"function AudioManager"},{"location":"api/Classes/classEngine_1_1Exception/","text":"Engine::Exception Reference #include <Exception.hpp> Inherits from exception Public Functions Name functions what () const functions Exception (std::string msg) functions Exception () =default Public Functions Documentation function what inline const char * what() const function Exception inline explicit Exception( std::string msg ) function Exception Exception() =default Created on 2019-10-31","title":"Engine::Exception"},{"location":"api/Classes/classEngine_1_1Exception/#engineexception-reference","text":"#include <Exception.hpp> Inherits from exception","title":"Engine::Exception Reference"},{"location":"api/Classes/classEngine_1_1Exception/#public-functions","text":"Name functions what () const functions Exception (std::string msg) functions Exception () =default","title":"Public Functions"},{"location":"api/Classes/classEngine_1_1Exception/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/Classes/classEngine_1_1Exception/#function-what","text":"inline const char * what() const","title":"function what"},{"location":"api/Classes/classEngine_1_1Exception/#function-exception","text":"inline explicit Exception( std::string msg )","title":"function Exception"},{"location":"api/Classes/classEngine_1_1Exception/#function-exception_1","text":"Exception() =default Created on 2019-10-31","title":"function Exception"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Framebuffer/","text":"Engine::Graphics::Framebuffer Reference #include <Framebuffer.hpp> Inherits from Engine::Graphics::Texture Public Functions Name virtual functions getDepth () const Returns the depth of the texture in pixels. virtual functions getHeight () const Returns the height of the texture in pixels. virtual functions getWidth () const Returns the width of the texture in pixels. virtual functions ~Framebuffer () functions Framebuffer (int width, int height) Public Functions Documentation function getDepth virtual int getDepth() const Returns the depth of the texture in pixels. Note : If this texture is 2D the depth is always 1 pixels Return : Depth in pixels function getHeight virtual int getHeight() const Returns the height of the texture in pixels. Return : Height in pixels function getWidth virtual int getWidth() const Returns the width of the texture in pixels. Return : Width in pixels function ~Framebuffer virtual ~Framebuffer() function Framebuffer Framebuffer( int width, int height ) Created on 2019-10-31","title":"Engine::Graphics::Framebuffer"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Framebuffer/#enginegraphicsframebuffer-reference","text":"#include <Framebuffer.hpp> Inherits from Engine::Graphics::Texture","title":"Engine::Graphics::Framebuffer Reference"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Framebuffer/#public-functions","text":"Name virtual functions getDepth () const Returns the depth of the texture in pixels. virtual functions getHeight () const Returns the height of the texture in pixels. virtual functions getWidth () const Returns the width of the texture in pixels. virtual functions ~Framebuffer () functions Framebuffer (int width, int height)","title":"Public Functions"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Framebuffer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-getdepth","text":"virtual int getDepth() const Returns the depth of the texture in pixels. Note : If this texture is 2D the depth is always 1 pixels Return : Depth in pixels","title":"function getDepth"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-getheight","text":"virtual int getHeight() const Returns the height of the texture in pixels. Return : Height in pixels","title":"function getHeight"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-getwidth","text":"virtual int getWidth() const Returns the width of the texture in pixels. Return : Width in pixels","title":"function getWidth"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-framebuffer","text":"virtual ~Framebuffer()","title":"function ~Framebuffer"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Framebuffer/#function-framebuffer_1","text":"Framebuffer( int width, int height ) Created on 2019-10-31","title":"function Framebuffer"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Handle/","text":"Engine::Graphics::Handle Reference #include <Handle.hpp> Inherited by Engine::Graphics::Texture Public Functions Name functions getHandle () const virtual functions ~Handle () =default functions Handle () =default Protected Attributes Name attributes handle Public Functions Documentation function getHandle inline int getHandle() const function ~Handle virtual ~Handle() =default function Handle Handle() =default Protected Attributes Documentation variable handle int handle; Created on 2019-10-31","title":"Engine::Graphics::Handle"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Handle/#enginegraphicshandle-reference","text":"#include <Handle.hpp> Inherited by Engine::Graphics::Texture","title":"Engine::Graphics::Handle Reference"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Handle/#public-functions","text":"Name functions getHandle () const virtual functions ~Handle () =default functions Handle () =default","title":"Public Functions"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Handle/#protected-attributes","text":"Name attributes handle","title":"Protected Attributes"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Handle/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Handle/#function-gethandle","text":"inline int getHandle() const","title":"function getHandle"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Handle/#function-handle","text":"virtual ~Handle() =default","title":"function ~Handle"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Handle/#function-handle_1","text":"Handle() =default","title":"function Handle"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Handle/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Handle/#variable-handle","text":"int handle; Created on 2019-10-31","title":"variable handle"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture/","text":"Engine::Graphics::Texture Reference This is a base texture class that serves as a base class for other texture types. #include <Texture.hpp> Inherits from Engine::Graphics::Handle Inherited by Engine::Graphics::Framebuffer , Engine::Graphics::Texture2D , Engine::Graphics::Texture3D Public Types Name enum types Type { UNKNOWN, RGBA8, RGB8, RGBA16, RGB16, RGBA32, RGB32 } Public Functions Name functions isLoaded () const virtual functions getDepth () const =0 Returns the depth of the texture in pixels. virtual functions getHeight () const =0 Returns the height of the texture in pixels. virtual functions getWidth () const =0 Returns the width of the texture in pixels. virtual functions ~Texture () =default functions Texture ( Type type) Protected Attributes Name attributes type attributes loaded Public Types Documentation enum Type enum Type { UNKNOWN, RGBA8, RGB8, RGBA16, RGB16, RGBA32, RGB32 } Public Functions Documentation function isLoaded inline bool isLoaded() const Does some more things function getDepth virtual int getDepth() const =0 Returns the depth of the texture in pixels. Note : If this texture is 2D the depth is always 1 pixels Return : Depth in pixels function getHeight virtual int getHeight() const =0 Returns the height of the texture in pixels. Return : Height in pixels function getWidth virtual int getWidth() const =0 Returns the width of the texture in pixels. Return : Width in pixels function ~Texture virtual ~Texture() =default function Texture explicit Texture( Type type ) Protected Attributes Documentation variable type Type type; variable loaded bool loaded {false}; Created on 2019-10-31","title":"Engine::Graphics::Texture"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture/#enginegraphicstexture-reference","text":"This is a base texture class that serves as a base class for other texture types. #include <Texture.hpp> Inherits from Engine::Graphics::Handle Inherited by Engine::Graphics::Framebuffer , Engine::Graphics::Texture2D , Engine::Graphics::Texture3D","title":"Engine::Graphics::Texture Reference"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture/#public-types","text":"Name enum types Type { UNKNOWN, RGBA8, RGB8, RGBA16, RGB16, RGBA32, RGB32 }","title":"Public Types"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture/#public-functions","text":"Name functions isLoaded () const virtual functions getDepth () const =0 Returns the depth of the texture in pixels. virtual functions getHeight () const =0 Returns the height of the texture in pixels. virtual functions getWidth () const =0 Returns the width of the texture in pixels. virtual functions ~Texture () =default functions Texture ( Type type)","title":"Public Functions"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture/#protected-attributes","text":"Name attributes type attributes loaded","title":"Protected Attributes"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture/#enum-type","text":"enum Type { UNKNOWN, RGBA8, RGB8, RGBA16, RGB16, RGBA32, RGB32 }","title":"enum Type"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture/#function-isloaded","text":"inline bool isLoaded() const Does some more things","title":"function isLoaded"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture/#function-getdepth","text":"virtual int getDepth() const =0 Returns the depth of the texture in pixels. Note : If this texture is 2D the depth is always 1 pixels Return : Depth in pixels","title":"function getDepth"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture/#function-getheight","text":"virtual int getHeight() const =0 Returns the height of the texture in pixels. Return : Height in pixels","title":"function getHeight"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture/#function-getwidth","text":"virtual int getWidth() const =0 Returns the width of the texture in pixels. Return : Width in pixels","title":"function getWidth"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture/#function-texture","text":"virtual ~Texture() =default","title":"function ~Texture"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture/#function-texture_1","text":"explicit Texture( Type type )","title":"function Texture"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture/#variable-type","text":"Type type;","title":"variable type"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture/#variable-loaded","text":"bool loaded {false}; Created on 2019-10-31","title":"variable loaded"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture2D/","text":"Engine::Graphics::Texture2D Reference #include <Texture2D.hpp> Inherits from Engine::Graphics::Texture Public Functions Name virtual functions getDepth () const Returns the depth of the texture in pixels. virtual functions getHeight () const Returns the height of the texture in pixels. virtual functions getWidth () const Returns the width of the texture in pixels. virtual functions ~Texture2D () functions Texture2D (int width, int height, uint8_t * data, Texture::Type type = Texture::Type::RGBA8 ) Public Functions Documentation function getDepth virtual int getDepth() const Returns the depth of the texture in pixels. Note : If this texture is 2D the depth is always 1 pixels Return : Depth in pixels function getHeight virtual int getHeight() const Returns the height of the texture in pixels. Return : Height in pixels function getWidth virtual int getWidth() const Returns the width of the texture in pixels. Return : Width in pixels function ~Texture2D virtual ~Texture2D() function Texture2D Texture2D( int width, int height, uint8_t * data, Texture::Type type =Texture::Type::RGBA8 ) Created on 2019-10-31","title":"Engine::Graphics::Texture2D"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture2D/#enginegraphicstexture2d-reference","text":"#include <Texture2D.hpp> Inherits from Engine::Graphics::Texture","title":"Engine::Graphics::Texture2D Reference"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture2D/#public-functions","text":"Name virtual functions getDepth () const Returns the depth of the texture in pixels. virtual functions getHeight () const Returns the height of the texture in pixels. virtual functions getWidth () const Returns the width of the texture in pixels. virtual functions ~Texture2D () functions Texture2D (int width, int height, uint8_t * data, Texture::Type type = Texture::Type::RGBA8 )","title":"Public Functions"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture2D/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture2D/#function-getdepth","text":"virtual int getDepth() const Returns the depth of the texture in pixels. Note : If this texture is 2D the depth is always 1 pixels Return : Depth in pixels","title":"function getDepth"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture2D/#function-getheight","text":"virtual int getHeight() const Returns the height of the texture in pixels. Return : Height in pixels","title":"function getHeight"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture2D/#function-getwidth","text":"virtual int getWidth() const Returns the width of the texture in pixels. Return : Width in pixels","title":"function getWidth"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture2D/#function-texture2d","text":"virtual ~Texture2D()","title":"function ~Texture2D"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture2D/#function-texture2d_1","text":"Texture2D( int width, int height, uint8_t * data, Texture::Type type =Texture::Type::RGBA8 ) Created on 2019-10-31","title":"function Texture2D"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture3D/","text":"Engine::Graphics::Texture3D Reference #include <Texture3D.hpp> Inherits from Engine::Graphics::Texture Public Functions Name virtual functions getDepth () const Returns the depth of the texture in pixels. virtual functions getHeight () const Returns the height of the texture in pixels. virtual functions getWidth () const Returns the width of the texture in pixels. virtual functions ~Texture3D () functions Texture3D (int width, int height, int depth, uint8_t * data, Texture::Type type = Texture::Type::RGBA8 ) Public Functions Documentation function getDepth virtual int getDepth() const Returns the depth of the texture in pixels. Note : If this texture is 2D the depth is always 1 pixels Return : Depth in pixels function getHeight virtual int getHeight() const Returns the height of the texture in pixels. Return : Height in pixels function getWidth virtual int getWidth() const Returns the width of the texture in pixels. Return : Width in pixels function ~Texture3D virtual ~Texture3D() function Texture3D Texture3D( int width, int height, int depth, uint8_t * data, Texture::Type type =Texture::Type::RGBA8 ) Created on 2019-10-31","title":"Engine::Graphics::Texture3D"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture3D/#enginegraphicstexture3d-reference","text":"#include <Texture3D.hpp> Inherits from Engine::Graphics::Texture","title":"Engine::Graphics::Texture3D Reference"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture3D/#public-functions","text":"Name virtual functions getDepth () const Returns the depth of the texture in pixels. virtual functions getHeight () const Returns the height of the texture in pixels. virtual functions getWidth () const Returns the width of the texture in pixels. virtual functions ~Texture3D () functions Texture3D (int width, int height, int depth, uint8_t * data, Texture::Type type = Texture::Type::RGBA8 )","title":"Public Functions"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture3D/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture3D/#function-getdepth","text":"virtual int getDepth() const Returns the depth of the texture in pixels. Note : If this texture is 2D the depth is always 1 pixels Return : Depth in pixels","title":"function getDepth"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture3D/#function-getheight","text":"virtual int getHeight() const Returns the height of the texture in pixels. Return : Height in pixels","title":"function getHeight"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture3D/#function-getwidth","text":"virtual int getWidth() const Returns the width of the texture in pixels. Return : Width in pixels","title":"function getWidth"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture3D/#function-texture3d","text":"virtual ~Texture3D()","title":"function ~Texture3D"},{"location":"api/Classes/classEngine_1_1Graphics_1_1Texture3D/#function-texture3d_1","text":"Texture3D( int width, int height, int depth, uint8_t * data, Texture::Type type =Texture::Type::RGBA8 ) Created on 2019-10-31","title":"function Texture3D"},{"location":"api/Classes/classEngine_1_1Utils_1_1ArrayView/","text":"Engine::Utils::ArrayView Reference Filesystem path utility functions. More... #include <ArrayView.hpp> Public Functions Name virtual functions size () const virtual functions data () const virtual functions ~ArrayView () =default functions ArrayView (const T * src, size_t len) Detailed Description Filesystem path utility functions. Thetype of the data, for example uint8_t Public Functions Documentation function size virtual size_t size() const function data virtual const T * data() const function ~ArrayView virtual ~ArrayView() =default function ArrayView ArrayView( const T * src, size_t len ) Created on 2019-10-31","title":"Engine::Utils::ArrayView"},{"location":"api/Classes/classEngine_1_1Utils_1_1ArrayView/#engineutilsarrayview-reference","text":"Filesystem path utility functions. More... #include <ArrayView.hpp>","title":"Engine::Utils::ArrayView Reference"},{"location":"api/Classes/classEngine_1_1Utils_1_1ArrayView/#public-functions","text":"Name virtual functions size () const virtual functions data () const virtual functions ~ArrayView () =default functions ArrayView (const T * src, size_t len)","title":"Public Functions"},{"location":"api/Classes/classEngine_1_1Utils_1_1ArrayView/#detailed-description","text":"Filesystem path utility functions. Thetype of the data, for example uint8_t","title":"Detailed Description"},{"location":"api/Classes/classEngine_1_1Utils_1_1ArrayView/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/Classes/classEngine_1_1Utils_1_1ArrayView/#function-size","text":"virtual size_t size() const","title":"function size"},{"location":"api/Classes/classEngine_1_1Utils_1_1ArrayView/#function-data","text":"virtual const T * data() const","title":"function data"},{"location":"api/Classes/classEngine_1_1Utils_1_1ArrayView/#function-arrayview","text":"virtual ~ArrayView() =default","title":"function ~ArrayView"},{"location":"api/Classes/classEngine_1_1Utils_1_1ArrayView/#function-arrayview_1","text":"ArrayView( const T * src, size_t len ) Created on 2019-10-31","title":"function ArrayView"},{"location":"api/Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/","text":"Engine::Assets::Asset::Event::Loaded Reference #include <Asset.hpp> Public Attributes Name attributes usage attributes success Public Attributes Documentation variable usage int usage; variable success bool success; Created on 2019-10-31","title":"Engine::Assets::Asset::Event::Loaded"},{"location":"api/Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#engineassetsasseteventloaded-reference","text":"#include <Asset.hpp>","title":"Engine::Assets::Asset::Event::Loaded Reference"},{"location":"api/Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#public-attributes","text":"Name attributes usage attributes success","title":"Public Attributes"},{"location":"api/Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api/Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#variable-usage","text":"int usage;","title":"variable usage"},{"location":"api/Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Loaded/#variable-success","text":"bool success; Created on 2019-10-31","title":"variable success"},{"location":"api/Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/","text":"Engine::Assets::Asset::Event::Unloaded Reference #include <Asset.hpp> Public Attributes Name attributes success Public Attributes Documentation variable success bool success; Created on 2019-10-31","title":"Engine::Assets::Asset::Event::Unloaded"},{"location":"api/Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/#engineassetsasseteventunloaded-reference","text":"#include <Asset.hpp>","title":"Engine::Assets::Asset::Event::Unloaded Reference"},{"location":"api/Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/#public-attributes","text":"Name attributes success","title":"Public Attributes"},{"location":"api/Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api/Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Unloaded/#variable-success","text":"bool success; Created on 2019-10-31","title":"variable success"},{"location":"api/Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/","text":"Engine::Assets::Asset::Event::Waiting Reference #include <Asset.hpp> Public Attributes Name attributes other The pointer to the other asset this asset is waiting for. Public Attributes Documentation variable other Asset * other; The pointer to the other asset this asset is waiting for. Note : May be null Created on 2019-10-31","title":"Engine::Assets::Asset::Event::Waiting"},{"location":"api/Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/#engineassetsasseteventwaiting-reference","text":"#include <Asset.hpp>","title":"Engine::Assets::Asset::Event::Waiting Reference"},{"location":"api/Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/#public-attributes","text":"Name attributes other The pointer to the other asset this asset is waiting for.","title":"Public Attributes"},{"location":"api/Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api/Classes/structEngine_1_1Assets_1_1Asset_1_1Event_1_1Waiting/#variable-other","text":"Asset * other; The pointer to the other asset this asset is waiting for. Note : May be null Created on 2019-10-31","title":"variable other"},{"location":"api/Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/","text":"Engine::Audio::AudioBuffer::TypedAudioData Reference Use this to populate the buffer. #include <AudioBuffer.hpp> Public Attributes Name attributes type attributes buffer Public Attributes Documentation variable type Type type; variable buffer AudioData buffer; Created on 2019-10-31","title":"Engine::Audio::AudioBuffer::TypedAudioData"},{"location":"api/Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#engineaudioaudiobuffertypedaudiodata-reference","text":"Use this to populate the buffer. #include <AudioBuffer.hpp>","title":"Engine::Audio::AudioBuffer::TypedAudioData Reference"},{"location":"api/Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#public-attributes","text":"Name attributes type attributes buffer","title":"Public Attributes"},{"location":"api/Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api/Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#variable-type","text":"Type type;","title":"variable type"},{"location":"api/Classes/structEngine_1_1Audio_1_1AudioBuffer_1_1TypedAudioData/#variable-buffer","text":"AudioData buffer; Created on 2019-10-31","title":"variable buffer"},{"location":"api/Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/","text":"Engine::Assets::Asset::Event Reference #include <Asset.hpp> Public Classes Name struct Waiting struct Unloaded struct Loaded Public Attributes Name attributes waiting attributes unloaded attributes loaded Public Attributes Documentation variable waiting struct Engine::Assets::Asset::Event::Waiting waiting; variable unloaded struct Engine::Assets::Asset::Event::Unloaded unloaded; variable loaded struct Engine::Assets::Asset::Event::Loaded loaded; Created on 2019-10-31","title":"Engine::Assets::Asset::Event"},{"location":"api/Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#engineassetsassetevent-reference","text":"#include <Asset.hpp>","title":"Engine::Assets::Asset::Event Reference"},{"location":"api/Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#public-classes","text":"Name struct Waiting struct Unloaded struct Loaded","title":"Public Classes"},{"location":"api/Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#public-attributes","text":"Name attributes waiting attributes unloaded attributes loaded","title":"Public Attributes"},{"location":"api/Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api/Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#variable-waiting","text":"struct Engine::Assets::Asset::Event::Waiting waiting;","title":"variable waiting"},{"location":"api/Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#variable-unloaded","text":"struct Engine::Assets::Asset::Event::Unloaded unloaded;","title":"variable unloaded"},{"location":"api/Classes/unionEngine_1_1Assets_1_1Asset_1_1Event/#variable-loaded","text":"struct Engine::Assets::Asset::Event::Loaded loaded; Created on 2019-10-31","title":"variable loaded"},{"location":"api/Modules/group__Assets/","text":"Assets Reference This is a brief description to the assets group. More... Classes Name class Asset union Event Detailed Description This is a brief description to the assets group. Some detailed description here Created on 2019-10-31","title":"Assets"},{"location":"api/Modules/group__Assets/#assets-reference","text":"This is a brief description to the assets group. More...","title":"Assets Reference"},{"location":"api/Modules/group__Assets/#classes","text":"Name class Asset union Event","title":"Classes"},{"location":"api/Modules/group__Assets/#detailed-description","text":"This is a brief description to the assets group. Some detailed description here Created on 2019-10-31","title":"Detailed Description"},{"location":"api/Modules/group__Audio/","text":"Audio Reference This is a brief description to the audio group. More... Classes Name class AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. class AudioBuffer A simple audio buffer to hold PCM samples Detailed Description This is a brief description to the audio group. Some detailed description here Created on 2019-10-31","title":"Audio"},{"location":"api/Modules/group__Audio/#audio-reference","text":"This is a brief description to the audio group. More...","title":"Audio Reference"},{"location":"api/Modules/group__Audio/#classes","text":"Name class AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. class AudioBuffer A simple audio buffer to hold PCM samples","title":"Classes"},{"location":"api/Modules/group__Audio/#detailed-description","text":"This is a brief description to the audio group. Some detailed description here Created on 2019-10-31","title":"Detailed Description"},{"location":"api/Modules/group__Engine/","text":"Engine Reference This is a brief description to the engine group. More... Groups Name Utils This is a brief description to the utils group. Graphics This is a brief description to the graphics group. Audio This is a brief description to the audio group. Assets This is a brief description to the assets group. Namespaces Name Engine This namespace contains all of the necessary engine components. Classes Name class Exception Detailed Description This is a brief description to the engine group. Some detailed description here Created on 2019-10-31","title":"Engine"},{"location":"api/Modules/group__Engine/#engine-reference","text":"This is a brief description to the engine group. More...","title":"Engine Reference"},{"location":"api/Modules/group__Engine/#groups","text":"Name Utils This is a brief description to the utils group. Graphics This is a brief description to the graphics group. Audio This is a brief description to the audio group. Assets This is a brief description to the assets group.","title":"Groups"},{"location":"api/Modules/group__Engine/#namespaces","text":"Name Engine This namespace contains all of the necessary engine components.","title":"Namespaces"},{"location":"api/Modules/group__Engine/#classes","text":"Name class Exception","title":"Classes"},{"location":"api/Modules/group__Engine/#detailed-description","text":"This is a brief description to the engine group. Some detailed description here Created on 2019-10-31","title":"Detailed Description"},{"location":"api/Modules/group__Graphics/","text":"Graphics Reference This is a brief description to the graphics group. More... Classes Name interface Texture This is a base texture class that serves as a base class for other texture types. class Texture3D class Texture2D class Handle class Framebuffer Functions Name functions getHandle (Handle & handle) Some namespace inline function. Detailed Description This is a brief description to the graphics group. Some detailed description here Functions Documentation function getHandle inline int getHandle( Handle & handle ) Some namespace inline function. Created on 2019-10-31","title":"Graphics"},{"location":"api/Modules/group__Graphics/#graphics-reference","text":"This is a brief description to the graphics group. More...","title":"Graphics Reference"},{"location":"api/Modules/group__Graphics/#classes","text":"Name interface Texture This is a base texture class that serves as a base class for other texture types. class Texture3D class Texture2D class Handle class Framebuffer","title":"Classes"},{"location":"api/Modules/group__Graphics/#functions","text":"Name functions getHandle (Handle & handle) Some namespace inline function.","title":"Functions"},{"location":"api/Modules/group__Graphics/#detailed-description","text":"This is a brief description to the graphics group. Some detailed description here","title":"Detailed Description"},{"location":"api/Modules/group__Graphics/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api/Modules/group__Graphics/#function-gethandle","text":"inline int getHandle( Handle & handle ) Some namespace inline function. Created on 2019-10-31","title":"function getHandle"},{"location":"api/Modules/group__Utils/","text":"Utils Reference This is a brief description to the utils group. More... Namespaces Name Path Filesystem path utility functions. Classes Name class ArrayView Filesystem path utility functions. Detailed Description This is a brief description to the utils group. Some detailed description here Created on 2019-10-31","title":"Utils"},{"location":"api/Modules/group__Utils/#utils-reference","text":"This is a brief description to the utils group. More...","title":"Utils Reference"},{"location":"api/Modules/group__Utils/#namespaces","text":"Name Path Filesystem path utility functions.","title":"Namespaces"},{"location":"api/Modules/group__Utils/#classes","text":"Name class ArrayView Filesystem path utility functions.","title":"Classes"},{"location":"api/Modules/group__Utils/#detailed-description","text":"This is a brief description to the utils group. Some detailed description here Created on 2019-10-31","title":"Detailed Description"},{"location":"api/Namespaces/namespaceEngine/","text":"Engine Reference This namespace contains all of the necessary engine components. Namespaces Name Utils Graphics Audio Assets Classes Name class Exception Functions Name functions getVersion () Detailed Description This namespace contains all of the necessary engine components. See : Engine::Assets See : Engine::Audio See : Engine::Graphics See : Engine::Utils Functions Documentation function getVersion std::string getVersion() Created on 2019-10-31","title":"Engine"},{"location":"api/Namespaces/namespaceEngine/#engine-reference","text":"This namespace contains all of the necessary engine components.","title":"Engine Reference"},{"location":"api/Namespaces/namespaceEngine/#namespaces","text":"Name Utils Graphics Audio Assets","title":"Namespaces"},{"location":"api/Namespaces/namespaceEngine/#classes","text":"Name class Exception","title":"Classes"},{"location":"api/Namespaces/namespaceEngine/#functions","text":"Name functions getVersion ()","title":"Functions"},{"location":"api/Namespaces/namespaceEngine/#detailed-description","text":"This namespace contains all of the necessary engine components. See : Engine::Assets See : Engine::Audio See : Engine::Graphics See : Engine::Utils","title":"Detailed Description"},{"location":"api/Namespaces/namespaceEngine/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api/Namespaces/namespaceEngine/#function-getversion","text":"std::string getVersion() Created on 2019-10-31","title":"function getVersion"},{"location":"api/Namespaces/namespaceEngine_1_1Assets/","text":"Engine::Assets Reference Classes Name class Asset Created on 2019-10-31","title":"Engine::Assets"},{"location":"api/Namespaces/namespaceEngine_1_1Assets/#engineassets-reference","text":"","title":"Engine::Assets Reference"},{"location":"api/Namespaces/namespaceEngine_1_1Assets/#classes","text":"Name class Asset Created on 2019-10-31","title":"Classes"},{"location":"api/Namespaces/namespaceEngine_1_1Audio/","text":"Engine::Audio Reference Classes Name class AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. class AudioBuffer A simple audio buffer to hold PCM samples Functions Name functions doSomething ( AudioBuffer & buffer) Do something with the buffer. Functions Documentation function doSomething void doSomething( AudioBuffer & buffer ) Do something with the buffer. Created on 2019-10-31","title":"Engine::Audio"},{"location":"api/Namespaces/namespaceEngine_1_1Audio/#engineaudio-reference","text":"","title":"Engine::Audio Reference"},{"location":"api/Namespaces/namespaceEngine_1_1Audio/#classes","text":"Name class AudioManager An audio manager that accepts multiple Audio::AudioBuffer instances. class AudioBuffer A simple audio buffer to hold PCM samples","title":"Classes"},{"location":"api/Namespaces/namespaceEngine_1_1Audio/#functions","text":"Name functions doSomething ( AudioBuffer & buffer) Do something with the buffer.","title":"Functions"},{"location":"api/Namespaces/namespaceEngine_1_1Audio/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api/Namespaces/namespaceEngine_1_1Audio/#function-dosomething","text":"void doSomething( AudioBuffer & buffer ) Do something with the buffer. Created on 2019-10-31","title":"function doSomething"},{"location":"api/Namespaces/namespaceEngine_1_1Graphics/","text":"Engine::Graphics Reference Classes Name class Texture3D class Texture2D interface Texture This is a base texture class that serves as a base class for other texture types. class Handle class Framebuffer Functions Name functions getHandle ( Handle & handle) Some namespace inline function. Functions Documentation function getHandle inline int getHandle( Handle & handle ) Some namespace inline function. Created on 2019-10-31","title":"Engine::Graphics"},{"location":"api/Namespaces/namespaceEngine_1_1Graphics/#enginegraphics-reference","text":"","title":"Engine::Graphics Reference"},{"location":"api/Namespaces/namespaceEngine_1_1Graphics/#classes","text":"Name class Texture3D class Texture2D interface Texture This is a base texture class that serves as a base class for other texture types. class Handle class Framebuffer","title":"Classes"},{"location":"api/Namespaces/namespaceEngine_1_1Graphics/#functions","text":"Name functions getHandle ( Handle & handle) Some namespace inline function.","title":"Functions"},{"location":"api/Namespaces/namespaceEngine_1_1Graphics/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api/Namespaces/namespaceEngine_1_1Graphics/#function-gethandle","text":"inline int getHandle( Handle & handle ) Some namespace inline function. Created on 2019-10-31","title":"function getHandle"},{"location":"api/Namespaces/namespaceEngine_1_1Utils/","text":"Engine::Utils Reference Namespaces Name Path Filesystem path utility functions. Classes Name class ArrayView Filesystem path utility functions. Created on 2019-10-31","title":"Engine::Utils"},{"location":"api/Namespaces/namespaceEngine_1_1Utils/#engineutils-reference","text":"","title":"Engine::Utils Reference"},{"location":"api/Namespaces/namespaceEngine_1_1Utils/#namespaces","text":"Name Path Filesystem path utility functions.","title":"Namespaces"},{"location":"api/Namespaces/namespaceEngine_1_1Utils/#classes","text":"Name class ArrayView Filesystem path utility functions. Created on 2019-10-31","title":"Classes"},{"location":"api/Namespaces/namespaceEngine_1_1Utils_1_1Path/","text":"Engine::Utils::Path Reference Filesystem path utility functions. Functions Name functions getExtension (const std::string & path) functions getFilename (const std::string & path) Functions Documentation function getExtension std::string getExtension( const std::string & path ) function getFilename std::string getFilename( const std::string & path ) Created on 2019-10-31","title":"Engine::Utils::Path"},{"location":"api/Namespaces/namespaceEngine_1_1Utils_1_1Path/#engineutilspath-reference","text":"Filesystem path utility functions.","title":"Engine::Utils::Path Reference"},{"location":"api/Namespaces/namespaceEngine_1_1Utils_1_1Path/#functions","text":"Name functions getExtension (const std::string & path) functions getFilename (const std::string & path)","title":"Functions"},{"location":"api/Namespaces/namespaceEngine_1_1Utils_1_1Path/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api/Namespaces/namespaceEngine_1_1Utils_1_1Path/#function-getextension","text":"std::string getExtension( const std::string & path )","title":"function getExtension"},{"location":"api/Namespaces/namespaceEngine_1_1Utils_1_1Path/#function-getfilename","text":"std::string getFilename( const std::string & path ) Created on 2019-10-31","title":"function getFilename"}]}